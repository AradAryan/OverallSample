//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class SyndromeDBEntities : DbContext
    {
        public SyndromeDBEntities()
            : base("name=SyndromeDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<BasicData> BasicData { get; set; }
        public DbSet<AdmissionType> AdmissionTypes { get; set; }
        public DbSet<AreaType> AreaTypes { get; set; }
        public DbSet<DeathLocation> DeathLocations { get; set; }
        public DbSet<Disease> Diseases { get; set; }
        public DbSet<Log> Logs { get; set; }
        public DbSet<AreaLocation> Tbl_AreaLocation { get; set; }
        public DbSet<Coded> Tbl_Coded { get; set; }
        public DbSet<Country> Tbl_Country { get; set; }
        public DbSet<Syndromic> Tbl_Syndromic { get; set; }
        public DbSet<AdverseReaction> TblAdverseReactions { get; set; }
        public DbSet<Complication> TblComplications { get; set; }
        public DbSet<Death> TblDeaths { get; set; }
        public DbSet<DrugHistory> TblDrugHistories { get; set; }
        public DbSet<DrugTreatment> TblDrugTreatments { get; set; }
        public DbSet<Method> TblMethods { get; set; }
        public DbSet<MSG> TblMSGs { get; set; }
        public DbSet<MSG_Admission> TblMSG_Admission { get; set; }
        public DbSet<PaperCode> TblPaperCodes { get; set; }
        public DbSet<PastMedicalHistory> TblPastMedicalHistories { get; set; }
        public DbSet<SMSTemplate> TblSMSTemplates { get; set; }
        public DbSet<Theroshold> TblTherosholds { get; set; }
        public DbSet<Travel> TblTravels { get; set; }
        public DbSet<EntityEntityType> EntityEntityTypes { get; set; }
        public DbSet<EntityType> EntityTypes { get; set; }
        public DbSet<GroupsPermission> GroupsPermissions { get; set; }
        public DbSet<Permission> Permissions { get; set; }
        public DbSet<Subsystem> Subsystems { get; set; }
        public DbSet<UsersUserGroup> UsersUserGroups { get; set; }
        public DbSet<ClinicalFinding> ClinicalFindings { get; set; }
        public DbSet<RequestLab> RequestLabs { get; set; }
        public DbSet<BasicDataType> BasicDataTypes { get; set; }
        public DbSet<LabBasicData> LabBasicDatas { get; set; }
        public DbSet<LabDiseasesCharacter> LabDiseasesCharacters { get; set; }
        public DbSet<Sample> Sample { get; set; }
        public DbSet<ProAdmissionDoneStep> ProAdmissionDoneStep { get; set; }
        public DbSet<WarningThreshold> WarningThresholds { get; set; }
        public DbSet<Guideline> Guidelines { get; set; }
        public DbSet<LabResult> LabResults { get; set; }
        public DbSet<LabDetailResult> LabDetailResults { get; set; }
        public DbSet<Tbl_CenterType> Tbl_CenterType { get; set; }
        public DbSet<SmsLog> SmsLogs { get; set; }
        public DbSet<Error> Errors { get; set; }
        public DbSet<GetPatintInfo> GetPatintInfoes { get; set; }
        public DbSet<University> Universities { get; set; }
        public DbSet<Admission> Admissions { get; set; }
        public DbSet<Diagnosi> Diagnosis { get; set; }
        public DbSet<Organization> Organizations { get; set; }
        public DbSet<ProLab> ProLabs { get; set; }
        public DbSet<ProTravel> ProTravels { get; set; }
        public DbSet<ProClinicalFinding> ProClinicalFindings { get; set; }
        public DbSet<ProDiagnosi> ProDiagnosis { get; set; }
        public DbSet<ProDrugHistory> ProDrugHistories { get; set; }
        public DbSet<ProPastMedicalHistory> ProPastMedicalHistories { get; set; }
        public DbSet<Patient> Patients { get; set; }
        public DbSet<CenterType> CenterTypes { get; set; }
        public DbSet<Position> Positions { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<UserGroup> UserGroups { get; set; }
        public DbSet<FAQ> FAQs { get; set; }
        public DbSet<ProAntiBio> ProAntiBios { get; set; }
        public DbSet<ProFood> ProFoods { get; set; }
        public DbSet<ProDrugTreatment> ProDrugTreatments { get; set; }
        public DbSet<ProAntiviru> ProAntivirus { get; set; }
        public DbSet<ProDeath> ProDeaths { get; set; }
        public DbSet<ProBreath> ProBreaths { get; set; }
        public DbSet<ProComplication> ProComplications { get; set; }
        public DbSet<SyndromRegister> SyndromRegisters { get; set; }
        public DbSet<ProAdmission> ProAdmissions { get; set; }
        public DbSet<Corporate> Corporates { get; set; }
        public DbSet<LabDiseaseAssignment> LabDiseaseAssignments { get; set; }
        public DbSet<UserCorporatesHierarchy> UserCorporatesHierarchies { get; set; }
        public DbSet<CorporatesHierarchy> CorporatesHierarchies { get; set; }
        public DbSet<ThresholdWarningReceiver> ThresholdWarningReceivers { get; set; }
        public DbSet<ThresholdWarningStatu> ThresholdWarningStatus { get; set; }
        public DbSet<visitCount> visitCounts { get; set; }
        public DbSet<TblDiseasesAccess> TblDiseasesAccesses { get; set; }
        public DbSet<ThresholdWarningMetaData> ThresholdWarningMetaDatas { get; set; }
        public DbSet<FAQTest> FAQTests { get; set; }
        public DbSet<TestSystem> TestSystems { get; set; }
        public DbSet<Crtbl_BranchBossInfo> Crtbl_BranchBossInfo { get; set; }
        public DbSet<Crtbl_BranchInfo> Crtbl_BranchInfo { get; set; }
        public DbSet<Crtbl_CashierInfo> Crtbl_CashierInfo { get; set; }
        public DbSet<Crtbl_CustInfo> Crtbl_CustInfo { get; set; }
        public DbSet<Crtbl_CustType> Crtbl_CustType { get; set; }
        public DbSet<Crtbl_Loan> Crtbl_Loan { get; set; }
        public DbSet<Crtbl_LoanType> Crtbl_LoanType { get; set; }
        public DbSet<Crtbl_MaaliUserInfo> Crtbl_MaaliUserInfo { get; set; }
        public DbSet<Ctr_Risk> Ctr_Risk { get; set; }
        public DbSet<Ctr_RiskCategory> Ctr_RiskCategory { get; set; }
        public DbSet<FaqStatistic> FaqStatistics { get; set; }
    
        public virtual ObjectResult<Nullable<int>> GetSMSLogsCount(Nullable<bool> isSend, string startdate, string enddate)
        {
            var isSendParameter = isSend.HasValue ?
                new ObjectParameter("IsSend", isSend) :
                new ObjectParameter("IsSend", typeof(bool));
    
            var startdateParameter = startdate != null ?
                new ObjectParameter("Startdate", startdate) :
                new ObjectParameter("Startdate", typeof(string));
    
            var enddateParameter = enddate != null ?
                new ObjectParameter("Enddate", enddate) :
                new ObjectParameter("Enddate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetSMSLogsCount", isSendParameter, startdateParameter, enddateParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int Sp_GetUniversity()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_GetUniversity");
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<SpGetHistoryById_Result> SpGetHistoryById(Nullable<long> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetHistoryById_Result>("SpGetHistoryById", userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> TheroSholdCalc(Nullable<long> syndromicId)
        {
            var syndromicIdParameter = syndromicId.HasValue ?
                new ObjectParameter("SyndromicId", syndromicId) :
                new ObjectParameter("SyndromicId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("TheroSholdCalc", syndromicIdParameter);
        }
    
        public virtual ObjectResult<CenterList_With_UserList_Model> Get_Special_CenterList_with_UserList_ForRegisterUser_BasedOnFieldOfView(string text, Nullable<int> corporateId, Nullable<int> take)
        {
            var textParameter = text != null ?
                new ObjectParameter("text", text) :
                new ObjectParameter("text", typeof(string));
    
            var corporateIdParameter = corporateId.HasValue ?
                new ObjectParameter("CorporateId", corporateId) :
                new ObjectParameter("CorporateId", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CenterList_With_UserList_Model>("Get_Special_CenterList_with_UserList_ForRegisterUser_BasedOnFieldOfView", textParameter, corporateIdParameter, takeParameter);
        }
    
        public virtual ObjectResult<CenterList_With_UserList_Model> GetCenterList_with_UserList_ForRegisterUser_BasedOnFieldOfView(string text, Nullable<int> corporateId, Nullable<int> take)
        {
            var textParameter = text != null ?
                new ObjectParameter("text", text) :
                new ObjectParameter("text", typeof(string));
    
            var corporateIdParameter = corporateId.HasValue ?
                new ObjectParameter("CorporateId", corporateId) :
                new ObjectParameter("CorporateId", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CenterList_With_UserList_Model>("GetCenterList_with_UserList_ForRegisterUser_BasedOnFieldOfView", textParameter, corporateIdParameter, takeParameter);
        }
    
        public virtual ObjectResult<GetCenerList> GetCenterListForRegisterUser(string text, Nullable<int> corporateId, Nullable<int> take)
        {
            var textParameter = text != null ?
                new ObjectParameter("text", text) :
                new ObjectParameter("text", typeof(string));
    
            var corporateIdParameter = corporateId.HasValue ?
                new ObjectParameter("CorporateId", corporateId) :
                new ObjectParameter("CorporateId", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCenerList>("GetCenterListForRegisterUser", textParameter, corporateIdParameter, takeParameter);
        }
    
        public virtual ObjectResult<CenterList_BaseFieldOfView_Model> GetCenterListForRegisterUserBasedOnFieldOfView(string text, Nullable<int> corporateId, Nullable<int> take)
        {
            var textParameter = text != null ?
                new ObjectParameter("text", text) :
                new ObjectParameter("text", typeof(string));
    
            var corporateIdParameter = corporateId.HasValue ?
                new ObjectParameter("CorporateId", corporateId) :
                new ObjectParameter("CorporateId", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CenterList_BaseFieldOfView_Model>("GetCenterListForRegisterUserBasedOnFieldOfView", textParameter, corporateIdParameter, takeParameter);
        }
    
        public virtual ObjectResult<MiniCenterType> GetChildrenOfCenterType(Nullable<int> centerId)
        {
            var centerIdParameter = centerId.HasValue ?
                new ObjectParameter("CenterId", centerId) :
                new ObjectParameter("CenterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MiniCenterType>("GetChildrenOfCenterType", centerIdParameter);
        }
    
        public virtual ObjectResult<MiniCenterType> GetChildrenOfCenterTypeBaseOnCorporateId(Nullable<int> corporateId)
        {
            var corporateIdParameter = corporateId.HasValue ?
                new ObjectParameter("CorporateId", corporateId) :
                new ObjectParameter("CorporateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MiniCenterType>("GetChildrenOfCenterTypeBaseOnCorporateId", corporateIdParameter);
        }
    
        public virtual int GetRealUserById(Nullable<decimal> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRealUserById", userIdParameter);
        }
    
        public virtual ObjectResult<GetAbsolutValue_Result> GetAbsolutValue(Nullable<int> syndromicId, string persianDate, Nullable<int> provinceId)
        {
            var syndromicIdParameter = syndromicId.HasValue ?
                new ObjectParameter("SyndromicId", syndromicId) :
                new ObjectParameter("SyndromicId", typeof(int));
    
            var persianDateParameter = persianDate != null ?
                new ObjectParameter("PersianDate", persianDate) :
                new ObjectParameter("PersianDate", typeof(string));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAbsolutValue_Result>("GetAbsolutValue", syndromicIdParameter, persianDateParameter, provinceIdParameter);
        }
    
        public virtual ObjectResult<GetRelativeValue_Result> GetRelativeValue(Nullable<int> syndromicId, string startPersianDate, string endPersianDate, Nullable<int> provinceId)
        {
            var syndromicIdParameter = syndromicId.HasValue ?
                new ObjectParameter("SyndromicId", syndromicId) :
                new ObjectParameter("SyndromicId", typeof(int));
    
            var startPersianDateParameter = startPersianDate != null ?
                new ObjectParameter("StartPersianDate", startPersianDate) :
                new ObjectParameter("StartPersianDate", typeof(string));
    
            var endPersianDateParameter = endPersianDate != null ?
                new ObjectParameter("EndPersianDate", endPersianDate) :
                new ObjectParameter("EndPersianDate", typeof(string));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRelativeValue_Result>("GetRelativeValue", syndromicIdParameter, startPersianDateParameter, endPersianDateParameter, provinceIdParameter);
        }
    
        public virtual ObjectResult<GetStatisticalCutoffPointValue_Result> GetStatisticalCutoffPointValue(Nullable<int> syndromicId, string startPersianDate, string endPersianDate, Nullable<int> provinceId)
        {
            var syndromicIdParameter = syndromicId.HasValue ?
                new ObjectParameter("SyndromicId", syndromicId) :
                new ObjectParameter("SyndromicId", typeof(int));
    
            var startPersianDateParameter = startPersianDate != null ?
                new ObjectParameter("StartPersianDate", startPersianDate) :
                new ObjectParameter("StartPersianDate", typeof(string));
    
            var endPersianDateParameter = endPersianDate != null ?
                new ObjectParameter("EndPersianDate", endPersianDate) :
                new ObjectParameter("EndPersianDate", typeof(string));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStatisticalCutoffPointValue_Result>("GetStatisticalCutoffPointValue", syndromicIdParameter, startPersianDateParameter, endPersianDateParameter, provinceIdParameter);
        }
    
        public virtual ObjectResult<WarningThrosholdReport_Result> WarningThrosholdReport(Nullable<long> skip, Nullable<long> take, string startdate, string enddate, Nullable<int> cityID, Nullable<int> provinceID)
        {
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(long));
    
            var startdateParameter = startdate != null ?
                new ObjectParameter("Startdate", startdate) :
                new ObjectParameter("Startdate", typeof(string));
    
            var enddateParameter = enddate != null ?
                new ObjectParameter("Enddate", enddate) :
                new ObjectParameter("Enddate", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WarningThrosholdReport_Result>("WarningThrosholdReport", skipParameter, takeParameter, startdateParameter, enddateParameter, cityIDParameter, provinceIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> WarningThrosholdReportCount(string startdate, string enddate, Nullable<int> cityID, Nullable<int> provinceID)
        {
            var startdateParameter = startdate != null ?
                new ObjectParameter("Startdate", startdate) :
                new ObjectParameter("Startdate", typeof(string));
    
            var enddateParameter = enddate != null ?
                new ObjectParameter("Enddate", enddate) :
                new ObjectParameter("Enddate", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("WarningThrosholdReportCount", startdateParameter, enddateParameter, cityIDParameter, provinceIDParameter);
        }
    
        public virtual ObjectResult<WarningThrosholdDashboard_Result> WarningThrosholdDashboard(Nullable<int> cityID, Nullable<int> provinceID)
        {
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WarningThrosholdDashboard_Result>("WarningThrosholdDashboard", cityIDParameter, provinceIDParameter);
        }
    
        public virtual int SetAlertThroshold(Nullable<int> syndromicId, string persianDate, Nullable<int> cityId, Nullable<int> provinceId)
        {
            var syndromicIdParameter = syndromicId.HasValue ?
                new ObjectParameter("SyndromicId", syndromicId) :
                new ObjectParameter("SyndromicId", typeof(int));
    
            var persianDateParameter = persianDate != null ?
                new ObjectParameter("PersianDate", persianDate) :
                new ObjectParameter("PersianDate", typeof(string));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetAlertThroshold", syndromicIdParameter, persianDateParameter, cityIdParameter, provinceIdParameter);
        }
    
        public virtual ObjectResult<GetUsersReceiveSMSTheroshold_Result> GetUsersReceiveSMSTheroshold(Nullable<int> cityId, Nullable<int> provinceid)
        {
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("cityId", cityId) :
                new ObjectParameter("cityId", typeof(int));
    
            var provinceidParameter = provinceid.HasValue ?
                new ObjectParameter("provinceid", provinceid) :
                new ObjectParameter("provinceid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUsersReceiveSMSTheroshold_Result>("GetUsersReceiveSMSTheroshold", cityIdParameter, provinceidParameter);
        }
    
        public virtual ObjectResult<GetCusumValue_Result> GetCusumValue(Nullable<int> syndromicId, string startPersianDate, string endPersianDate, Nullable<int> provinceId)
        {
            var syndromicIdParameter = syndromicId.HasValue ?
                new ObjectParameter("SyndromicId", syndromicId) :
                new ObjectParameter("SyndromicId", typeof(int));
    
            var startPersianDateParameter = startPersianDate != null ?
                new ObjectParameter("StartPersianDate", startPersianDate) :
                new ObjectParameter("StartPersianDate", typeof(string));
    
            var endPersianDateParameter = endPersianDate != null ?
                new ObjectParameter("EndPersianDate", endPersianDate) :
                new ObjectParameter("EndPersianDate", typeof(string));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCusumValue_Result>("GetCusumValue", syndromicIdParameter, startPersianDateParameter, endPersianDateParameter, provinceIdParameter);
        }
    
        public virtual ObjectResult<GetAllThrosholds_Result> GetAllThrosholds()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllThrosholds_Result>("GetAllThrosholds");
        }
    
        public virtual ObjectResult<GetSMSLogs_Result> GetSMSLogs(Nullable<long> skip, Nullable<long> take, Nullable<bool> isSend, string startdate, string enddate)
        {
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(long));
    
            var isSendParameter = isSend.HasValue ?
                new ObjectParameter("IsSend", isSend) :
                new ObjectParameter("IsSend", typeof(bool));
    
            var startdateParameter = startdate != null ?
                new ObjectParameter("Startdate", startdate) :
                new ObjectParameter("Startdate", typeof(string));
    
            var enddateParameter = enddate != null ?
                new ObjectParameter("Enddate", enddate) :
                new ObjectParameter("Enddate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSMSLogs_Result>("GetSMSLogs", skipParameter, takeParameter, isSendParameter, startdateParameter, enddateParameter);
        }
    
        public virtual ObjectResult<GetSyndromRegisterNotSepas_Result> GetSyndromRegisterNotSepas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSyndromRegisterNotSepas_Result>("GetSyndromRegisterNotSepas");
        }
    
        public virtual ObjectResult<string> GetUserNotSendVisit(string date)
        {
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetUserNotSendVisit", dateParameter);
        }
    
        public virtual ObjectResult<GetProSyndromDitailsPatientInformation_Result> GetProSyndromDitailsPatientInformation(Nullable<int> admissionId)
        {
            var admissionIdParameter = admissionId.HasValue ?
                new ObjectParameter("AdmissionId", admissionId) :
                new ObjectParameter("AdmissionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProSyndromDitailsPatientInformation_Result>("GetProSyndromDitailsPatientInformation", admissionIdParameter);
        }
    
        public virtual ObjectResult<spGetVisitHistory_Result> spGetVisitHistory(string startDate, string endDate, Nullable<long> corporateId, Nullable<int> skip, Nullable<int> take)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(string));
    
            var corporateIdParameter = corporateId.HasValue ?
                new ObjectParameter("corporateId", corporateId) :
                new ObjectParameter("corporateId", typeof(long));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetVisitHistory_Result>("spGetVisitHistory", startDateParameter, endDateParameter, corporateIdParameter, skipParameter, takeParameter);
        }
    
        public virtual ObjectResult<spGetThresholdWarningReceivers_Result> spGetThresholdWarningReceivers(Nullable<long> networkId)
        {
            var networkIdParameter = networkId.HasValue ?
                new ObjectParameter("networkId", networkId) :
                new ObjectParameter("networkId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetThresholdWarningReceivers_Result>("spGetThresholdWarningReceivers", networkIdParameter);
        }
    
        public virtual ObjectResult<ThresholdWarning_Result> spThresholdGetAbsoluteValueWarnings(Nullable<int> thresholdId, string date)
        {
            var thresholdIdParameter = thresholdId.HasValue ?
                new ObjectParameter("thresholdId", thresholdId) :
                new ObjectParameter("thresholdId", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ThresholdWarning_Result>("spThresholdGetAbsoluteValueWarnings", thresholdIdParameter, dateParameter);
        }
    
        public virtual ObjectResult<ThresholdWarning_Result> spThresholdGetStatisticalCutoffPointWarnings(Nullable<int> thresholdId, string date)
        {
            var thresholdIdParameter = thresholdId.HasValue ?
                new ObjectParameter("thresholdId", thresholdId) :
                new ObjectParameter("thresholdId", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ThresholdWarning_Result>("spThresholdGetStatisticalCutoffPointWarnings", thresholdIdParameter, dateParameter);
        }
    
        public virtual ObjectResult<spThresholdGetCuSumRawData_Result> spThresholdGetCuSumRawData(Nullable<int> thresholdId, string date)
        {
            var thresholdIdParameter = thresholdId.HasValue ?
                new ObjectParameter("thresholdId", thresholdId) :
                new ObjectParameter("thresholdId", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spThresholdGetCuSumRawData_Result>("spThresholdGetCuSumRawData", thresholdIdParameter, dateParameter);
        }
    
        public virtual ObjectResult<spThresholdGetSyndromPercent_Result> spThresholdGetSyndromPercent(Nullable<int> syndromId, string startDate, string endDate, Nullable<long> networkId)
        {
            var syndromIdParameter = syndromId.HasValue ?
                new ObjectParameter("syndromId", syndromId) :
                new ObjectParameter("syndromId", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(string));
    
            var networkIdParameter = networkId.HasValue ?
                new ObjectParameter("networkId", networkId) :
                new ObjectParameter("networkId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spThresholdGetSyndromPercent_Result>("spThresholdGetSyndromPercent", syndromIdParameter, startDateParameter, endDateParameter, networkIdParameter);
        }
    
        public virtual ObjectResult<spGetCenters_Result> spGetCenters(string province, string universityId, string networkId, Nullable<int> currentUserId)
        {
            var provinceParameter = province != null ?
                new ObjectParameter("province", province) :
                new ObjectParameter("province", typeof(string));
    
            var universityIdParameter = universityId != null ?
                new ObjectParameter("universityId", universityId) :
                new ObjectParameter("universityId", typeof(string));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("networkId", networkId) :
                new ObjectParameter("networkId", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("currentUserId", currentUserId) :
                new ObjectParameter("currentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCenters_Result>("spGetCenters", provinceParameter, universityIdParameter, networkIdParameter, currentUserIdParameter);
        }
    
        public virtual ObjectResult<spGetProvinceAndCity_Result> spGetProvinceAndCity(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProvinceAndCity_Result>("spGetProvinceAndCity", userIdParameter);
        }
    
        public virtual ObjectResult<spGetProvinceAndCity_Result> spGetCorporateProvinceAndCity(Nullable<long> corpId)
        {
            var corpIdParameter = corpId.HasValue ?
                new ObjectParameter("corpId", corpId) :
                new ObjectParameter("corpId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProvinceAndCity_Result>("spGetCorporateProvinceAndCity", corpIdParameter);
        }
    
        public virtual ObjectResult<spGetUserCorporateInfo_Result> spGetUserCorporateInfo(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserCorporateInfo_Result>("spGetUserCorporateInfo", userIdParameter);
        }
    
        public virtual ObjectResult<spUserAndSubUsersHasEnteredVisitCount_Result> spUserAndSubUsersHasEnteredVisitCount(Nullable<int> userId, string date)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUserAndSubUsersHasEnteredVisitCount_Result>("spUserAndSubUsersHasEnteredVisitCount", userIdParameter, dateParameter);
        }
    
        public virtual ObjectResult<spGetCorporatesNotEnteredVisitCount_Result> spGetCorporatesNotEnteredVisitCount(Nullable<int> userId, string date)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCorporatesNotEnteredVisitCount_Result>("spGetCorporatesNotEnteredVisitCount", userIdParameter, dateParameter);
        }
    
        public virtual ObjectResult<spGetMaxRespiratoryReport_Result> spGetMaxRespiratoryReport(string provinceId, string universityId, string networkId, string centerId, string startDate, string endDate, Nullable<int> currentUserId)
        {
            var provinceIdParameter = provinceId != null ?
                new ObjectParameter("provinceId", provinceId) :
                new ObjectParameter("provinceId", typeof(string));
    
            var universityIdParameter = universityId != null ?
                new ObjectParameter("universityId", universityId) :
                new ObjectParameter("universityId", typeof(string));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("networkId", networkId) :
                new ObjectParameter("networkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("centerId", centerId) :
                new ObjectParameter("centerId", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("currentUserId", currentUserId) :
                new ObjectParameter("currentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetMaxRespiratoryReport_Result>("spGetMaxRespiratoryReport", provinceIdParameter, universityIdParameter, networkIdParameter, centerIdParameter, startDateParameter, endDateParameter, currentUserIdParameter);
        }
    
        public virtual ObjectResult<spGetILISentinelReport_Result> spGetILISentinelReport(string provinceId, string universityId, string networkId, string centerId, string startDate, string endDate, string syndromId, Nullable<int> currentUserId)
        {
            var provinceIdParameter = provinceId != null ?
                new ObjectParameter("provinceId", provinceId) :
                new ObjectParameter("provinceId", typeof(string));
    
            var universityIdParameter = universityId != null ?
                new ObjectParameter("universityId", universityId) :
                new ObjectParameter("universityId", typeof(string));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("networkId", networkId) :
                new ObjectParameter("networkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("centerId", centerId) :
                new ObjectParameter("centerId", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(string));
    
            var syndromIdParameter = syndromId != null ?
                new ObjectParameter("syndromId", syndromId) :
                new ObjectParameter("syndromId", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("currentUserId", currentUserId) :
                new ObjectParameter("currentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetILISentinelReport_Result>("spGetILISentinelReport", provinceIdParameter, universityIdParameter, networkIdParameter, centerIdParameter, startDateParameter, endDateParameter, syndromIdParameter, currentUserIdParameter);
        }
    
        public virtual ObjectResult<spGetILIFlowReport_Result> spGetILIFlowReport(string provinceId, string universityId, string networkId, string centerId, string startDate, string endDate, string syndromId, string type, Nullable<int> currentUserId)
        {
            var provinceIdParameter = provinceId != null ?
                new ObjectParameter("provinceId", provinceId) :
                new ObjectParameter("provinceId", typeof(string));
    
            var universityIdParameter = universityId != null ?
                new ObjectParameter("universityId", universityId) :
                new ObjectParameter("universityId", typeof(string));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("networkId", networkId) :
                new ObjectParameter("networkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("centerId", centerId) :
                new ObjectParameter("centerId", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(string));
    
            var syndromIdParameter = syndromId != null ?
                new ObjectParameter("syndromId", syndromId) :
                new ObjectParameter("syndromId", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("currentUserId", currentUserId) :
                new ObjectParameter("currentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetILIFlowReport_Result>("spGetILIFlowReport", provinceIdParameter, universityIdParameter, networkIdParameter, centerIdParameter, startDateParameter, endDateParameter, syndromIdParameter, typeParameter, currentUserIdParameter);
        }
    
        public virtual ObjectResult<spGetMapReport_Result> spGetMapReport(string startDate, string endDate, string syndromId, string diseaseId, string type, string source, Nullable<bool> standing, Nullable<bool> admitted, Nullable<bool> died, Nullable<bool> positive, Nullable<bool> negative, Nullable<bool> reject, Nullable<bool> noSample)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(string));
    
            var syndromIdParameter = syndromId != null ?
                new ObjectParameter("syndromId", syndromId) :
                new ObjectParameter("syndromId", typeof(string));
    
            var diseaseIdParameter = diseaseId != null ?
                new ObjectParameter("diseaseId", diseaseId) :
                new ObjectParameter("diseaseId", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("source", source) :
                new ObjectParameter("source", typeof(string));
    
            var standingParameter = standing.HasValue ?
                new ObjectParameter("standing", standing) :
                new ObjectParameter("standing", typeof(bool));
    
            var admittedParameter = admitted.HasValue ?
                new ObjectParameter("admitted", admitted) :
                new ObjectParameter("admitted", typeof(bool));
    
            var diedParameter = died.HasValue ?
                new ObjectParameter("died", died) :
                new ObjectParameter("died", typeof(bool));
    
            var positiveParameter = positive.HasValue ?
                new ObjectParameter("positive", positive) :
                new ObjectParameter("positive", typeof(bool));
    
            var negativeParameter = negative.HasValue ?
                new ObjectParameter("negative", negative) :
                new ObjectParameter("negative", typeof(bool));
    
            var rejectParameter = reject.HasValue ?
                new ObjectParameter("reject", reject) :
                new ObjectParameter("reject", typeof(bool));
    
            var noSampleParameter = noSample.HasValue ?
                new ObjectParameter("noSample", noSample) :
                new ObjectParameter("noSample", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetMapReport_Result>("spGetMapReport", startDateParameter, endDateParameter, syndromIdParameter, diseaseIdParameter, typeParameter, sourceParameter, standingParameter, admittedParameter, diedParameter, positiveParameter, negativeParameter, rejectParameter, noSampleParameter);
        }
    
        public virtual ObjectResult<SpGetLabs_Result> SpGetLabs(Nullable<long> labId)
        {
            var labIdParameter = labId.HasValue ?
                new ObjectParameter("labId", labId) :
                new ObjectParameter("labId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLabs_Result>("SpGetLabs", labIdParameter);
        }
    
        public virtual ObjectResult<SpGetLabResult_Result> SpGetLabResult(Nullable<int> admissionId, Nullable<int> currentUserId)
        {
            var admissionIdParameter = admissionId.HasValue ?
                new ObjectParameter("admissionId", admissionId) :
                new ObjectParameter("admissionId", typeof(int));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("currentUserId", currentUserId) :
                new ObjectParameter("currentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLabResult_Result>("SpGetLabResult", admissionIdParameter, currentUserIdParameter);
        }
    
        public virtual ObjectResult<SpGetAdmissionLabResults_Result> SpGetAdmissionLabResults(Nullable<int> admissionId)
        {
            var admissionIdParameter = admissionId.HasValue ?
                new ObjectParameter("admissionId", admissionId) :
                new ObjectParameter("admissionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAdmissionLabResults_Result>("SpGetAdmissionLabResults", admissionIdParameter);
        }
    
        public virtual ObjectResult<SpGetAdmissionLabResultDetails_Result> SpGetAdmissionLabResultDetails(Nullable<int> admissionId)
        {
            var admissionIdParameter = admissionId.HasValue ?
                new ObjectParameter("admissionId", admissionId) :
                new ObjectParameter("admissionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAdmissionLabResultDetails_Result>("SpGetAdmissionLabResultDetails", admissionIdParameter);
        }
    
        public virtual ObjectResult<spSearchCorp_Result> spSearchCorp(string provinceId, string universityId, string networkId, string centerId, string name, string guid, Nullable<int> skip, Nullable<int> take, Nullable<int> currentUserId, Nullable<bool> showLabs)
        {
            var provinceIdParameter = provinceId != null ?
                new ObjectParameter("provinceId", provinceId) :
                new ObjectParameter("provinceId", typeof(string));
    
            var universityIdParameter = universityId != null ?
                new ObjectParameter("universityId", universityId) :
                new ObjectParameter("universityId", typeof(string));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("CenterId", centerId) :
                new ObjectParameter("CenterId", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var guidParameter = guid != null ?
                new ObjectParameter("guid", guid) :
                new ObjectParameter("guid", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("currentUserId", currentUserId) :
                new ObjectParameter("currentUserId", typeof(int));
    
            var showLabsParameter = showLabs.HasValue ?
                new ObjectParameter("showLabs", showLabs) :
                new ObjectParameter("showLabs", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSearchCorp_Result>("spSearchCorp", provinceIdParameter, universityIdParameter, networkIdParameter, centerIdParameter, nameParameter, guidParameter, skipParameter, takeParameter, currentUserIdParameter, showLabsParameter);
        }
    
        public virtual ObjectResult<GetUserPositionHierarchy_Result> GetUserPositionHierarchy(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserPositionHierarchy_Result>("GetUserPositionHierarchy", userIdParameter);
        }
    
        public virtual ObjectResult<GetSyndromDetailsPatientInformation_Result> GetSyndromDetailsPatientInformation(Nullable<int> admissionId)
        {
            var admissionIdParameter = admissionId.HasValue ?
                new ObjectParameter("AdmissionId", admissionId) :
                new ObjectParameter("AdmissionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSyndromDetailsPatientInformation_Result>("GetSyndromDetailsPatientInformation", admissionIdParameter);
        }
    
        public virtual ObjectResult<GetProSyndromDitails_Result> GetProSyndromDitails(Nullable<int> admissionId)
        {
            var admissionIdParameter = admissionId.HasValue ?
                new ObjectParameter("AdmissionId", admissionId) :
                new ObjectParameter("AdmissionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProSyndromDitails_Result>("GetProSyndromDitails", admissionIdParameter);
        }
    
        public virtual int DeleteItemsWhileUpdate(string query)
        {
            var queryParameter = query != null ?
                new ObjectParameter("query", query) :
                new ObjectParameter("query", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteItemsWhileUpdate", queryParameter);
        }
    
        public virtual ObjectResult<GetProSyndromDitailsForWord_Result> GetProSyndromDitailsForWord(Nullable<int> admissionId)
        {
            var admissionIdParameter = admissionId.HasValue ?
                new ObjectParameter("AdmissionId", admissionId) :
                new ObjectParameter("AdmissionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProSyndromDitailsForWord_Result>("GetProSyndromDitailsForWord", admissionIdParameter);
        }
    
        public virtual ObjectResult<GetProRegisterSyndroms_Result> GetProRegisterSyndroms(string startDate, string endDate, string university, string province, string syndromId, string name, string family, string nationalCode, Nullable<int> skip, Nullable<int> take, string admissionType, string paper, string networkId, string centerId, string primaryResultId, Nullable<bool> showIncompleteItems, Nullable<bool> deleted, Nullable<bool> indirect, Nullable<int> currentUserId)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var universityParameter = university != null ?
                new ObjectParameter("University", university) :
                new ObjectParameter("University", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            var syndromIdParameter = syndromId != null ?
                new ObjectParameter("SyndromId", syndromId) :
                new ObjectParameter("SyndromId", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var familyParameter = family != null ?
                new ObjectParameter("Family", family) :
                new ObjectParameter("Family", typeof(string));
    
            var nationalCodeParameter = nationalCode != null ?
                new ObjectParameter("NationalCode", nationalCode) :
                new ObjectParameter("NationalCode", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var admissionTypeParameter = admissionType != null ?
                new ObjectParameter("AdmissionType", admissionType) :
                new ObjectParameter("AdmissionType", typeof(string));
    
            var paperParameter = paper != null ?
                new ObjectParameter("Paper", paper) :
                new ObjectParameter("Paper", typeof(string));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("CenterId", centerId) :
                new ObjectParameter("CenterId", typeof(string));
    
            var primaryResultIdParameter = primaryResultId != null ?
                new ObjectParameter("PrimaryResultId", primaryResultId) :
                new ObjectParameter("PrimaryResultId", typeof(string));
    
            var showIncompleteItemsParameter = showIncompleteItems.HasValue ?
                new ObjectParameter("showIncompleteItems", showIncompleteItems) :
                new ObjectParameter("showIncompleteItems", typeof(bool));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            var indirectParameter = indirect.HasValue ?
                new ObjectParameter("Indirect", indirect) :
                new ObjectParameter("Indirect", typeof(bool));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("currentUserId", currentUserId) :
                new ObjectParameter("currentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProRegisterSyndroms_Result>("GetProRegisterSyndroms", startDateParameter, endDateParameter, universityParameter, provinceParameter, syndromIdParameter, nameParameter, familyParameter, nationalCodeParameter, skipParameter, takeParameter, admissionTypeParameter, paperParameter, networkIdParameter, centerIdParameter, primaryResultIdParameter, showIncompleteItemsParameter, deletedParameter, indirectParameter, currentUserIdParameter);
        }
    
        public virtual ObjectResult<spGetLabDiseaseAssignments_Result> spGetLabDiseaseAssignments(string labId, string syndromId, string diseaseId, string levelId, Nullable<int> skip, Nullable<int> take)
        {
            var labIdParameter = labId != null ?
                new ObjectParameter("labId", labId) :
                new ObjectParameter("labId", typeof(string));
    
            var syndromIdParameter = syndromId != null ?
                new ObjectParameter("syndromId", syndromId) :
                new ObjectParameter("syndromId", typeof(string));
    
            var diseaseIdParameter = diseaseId != null ?
                new ObjectParameter("diseaseId", diseaseId) :
                new ObjectParameter("diseaseId", typeof(string));
    
            var levelIdParameter = levelId != null ?
                new ObjectParameter("levelId", levelId) :
                new ObjectParameter("levelId", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLabDiseaseAssignments_Result>("spGetLabDiseaseAssignments", labIdParameter, syndromIdParameter, diseaseIdParameter, levelIdParameter, skipParameter, takeParameter);
        }
    
        public virtual ObjectResult<spGetLabSupportedDiseases_Result> spGetLabSupportedDiseases(Nullable<int> syndromId, Nullable<int> userId)
        {
            var syndromIdParameter = syndromId.HasValue ?
                new ObjectParameter("syndromId", syndromId) :
                new ObjectParameter("syndromId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLabSupportedDiseases_Result>("spGetLabSupportedDiseases", syndromIdParameter, userIdParameter);
        }
    
        public virtual int UpdateCorporateHierarchy(Nullable<long> corpId)
        {
            var corpIdParameter = corpId.HasValue ?
                new ObjectParameter("corpId", corpId) :
                new ObjectParameter("corpId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCorporateHierarchy", corpIdParameter);
        }
    
        public virtual ObjectResult<spSearchUsers_Result> spSearchUsers(Nullable<long> corporateId, string firstname, string lastname, string username, string mobile, string email, Nullable<int> skip, Nullable<int> take)
        {
            var corporateIdParameter = corporateId.HasValue ?
                new ObjectParameter("corporateId", corporateId) :
                new ObjectParameter("corporateId", typeof(long));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSearchUsers_Result>("spSearchUsers", corporateIdParameter, firstnameParameter, lastnameParameter, usernameParameter, mobileParameter, emailParameter, skipParameter, takeParameter);
        }
    
        public virtual ObjectResult<spSaveUser_Result> spSaveUser(Nullable<int> id, Nullable<long> corporateId, string username, string password, string firstname, string lastname, string mobile, string phone, string email, Nullable<int> positionId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var corporateIdParameter = corporateId.HasValue ?
                new ObjectParameter("corporateId", corporateId) :
                new ObjectParameter("corporateId", typeof(long));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("positionId", positionId) :
                new ObjectParameter("positionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSaveUser_Result>("spSaveUser", idParameter, corporateIdParameter, usernameParameter, passwordParameter, firstnameParameter, lastnameParameter, mobileParameter, phoneParameter, emailParameter, positionIdParameter);
        }
    
        public virtual int DeleteOrDisableUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteOrDisableUser", userIdParameter);
        }
    
        public virtual ObjectResult<spGetThresholdWarningStatusHistory_Result> spGetThresholdWarningStatusHistory(Nullable<int> warningId)
        {
            var warningIdParameter = warningId.HasValue ?
                new ObjectParameter("warningId", warningId) :
                new ObjectParameter("warningId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetThresholdWarningStatusHistory_Result>("spGetThresholdWarningStatusHistory", warningIdParameter);
        }
    
        public virtual ObjectResult<spCheckIsDuplicateSyndrom_Result> spCheckIsDuplicateSyndrom(string patientNationalCode, Nullable<int> syndromId)
        {
            var patientNationalCodeParameter = patientNationalCode != null ?
                new ObjectParameter("patientNationalCode", patientNationalCode) :
                new ObjectParameter("patientNationalCode", typeof(string));
    
            var syndromIdParameter = syndromId.HasValue ?
                new ObjectParameter("syndromId", syndromId) :
                new ObjectParameter("syndromId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCheckIsDuplicateSyndrom_Result>("spCheckIsDuplicateSyndrom", patientNationalCodeParameter, syndromIdParameter);
        }
    
        public virtual ObjectResult<spGetLastMaximumInfo_Result> spGetLastMaximumInfo(string nationalCode)
        {
            var nationalCodeParameter = nationalCode != null ?
                new ObjectParameter("nationalCode", nationalCode) :
                new ObjectParameter("nationalCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLastMaximumInfo_Result>("spGetLastMaximumInfo", nationalCodeParameter);
        }
    
        public virtual int spAutoInsertMissedVisitCounts(string date)
        {
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAutoInsertMissedVisitCounts", dateParameter);
        }
    
        public virtual ObjectResult<spSearchThresholdWarnings_Result> spSearchThresholdWarnings(string provinceId, string universityId, string networkId, string syndromId, string methodId, string preProcessMethod, Nullable<bool> percentBased, Nullable<bool> countBased, Nullable<int> skip, Nullable<int> take, string startDate, string endDate, string warningStatusId, string warningId)
        {
            var provinceIdParameter = provinceId != null ?
                new ObjectParameter("provinceId", provinceId) :
                new ObjectParameter("provinceId", typeof(string));
    
            var universityIdParameter = universityId != null ?
                new ObjectParameter("universityId", universityId) :
                new ObjectParameter("universityId", typeof(string));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("networkId", networkId) :
                new ObjectParameter("networkId", typeof(string));
    
            var syndromIdParameter = syndromId != null ?
                new ObjectParameter("syndromId", syndromId) :
                new ObjectParameter("syndromId", typeof(string));
    
            var methodIdParameter = methodId != null ?
                new ObjectParameter("methodId", methodId) :
                new ObjectParameter("methodId", typeof(string));
    
            var preProcessMethodParameter = preProcessMethod != null ?
                new ObjectParameter("preProcessMethod", preProcessMethod) :
                new ObjectParameter("preProcessMethod", typeof(string));
    
            var percentBasedParameter = percentBased.HasValue ?
                new ObjectParameter("percentBased", percentBased) :
                new ObjectParameter("percentBased", typeof(bool));
    
            var countBasedParameter = countBased.HasValue ?
                new ObjectParameter("countBased", countBased) :
                new ObjectParameter("countBased", typeof(bool));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(string));
    
            var warningStatusIdParameter = warningStatusId != null ?
                new ObjectParameter("warningStatusId", warningStatusId) :
                new ObjectParameter("warningStatusId", typeof(string));
    
            var warningIdParameter = warningId != null ?
                new ObjectParameter("warningId", warningId) :
                new ObjectParameter("warningId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSearchThresholdWarnings_Result>("spSearchThresholdWarnings", provinceIdParameter, universityIdParameter, networkIdParameter, syndromIdParameter, methodIdParameter, preProcessMethodParameter, percentBasedParameter, countBasedParameter, skipParameter, takeParameter, startDateParameter, endDateParameter, warningStatusIdParameter, warningIdParameter);
        }
    
        public virtual ObjectResult<spThresholdSearch_Result> spThresholdSearch(string provinceId, string universityId, string networkId, string syndromId, string methodId, string preProcessMethod, Nullable<bool> percentBased, Nullable<bool> countBased, Nullable<int> currentUserId, Nullable<int> skip, Nullable<int> take)
        {
            var provinceIdParameter = provinceId != null ?
                new ObjectParameter("provinceId", provinceId) :
                new ObjectParameter("provinceId", typeof(string));
    
            var universityIdParameter = universityId != null ?
                new ObjectParameter("universityId", universityId) :
                new ObjectParameter("universityId", typeof(string));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("networkId", networkId) :
                new ObjectParameter("networkId", typeof(string));
    
            var syndromIdParameter = syndromId != null ?
                new ObjectParameter("syndromId", syndromId) :
                new ObjectParameter("syndromId", typeof(string));
    
            var methodIdParameter = methodId != null ?
                new ObjectParameter("methodId", methodId) :
                new ObjectParameter("methodId", typeof(string));
    
            var preProcessMethodParameter = preProcessMethod != null ?
                new ObjectParameter("preProcessMethod", preProcessMethod) :
                new ObjectParameter("preProcessMethod", typeof(string));
    
            var percentBasedParameter = percentBased.HasValue ?
                new ObjectParameter("percentBased", percentBased) :
                new ObjectParameter("percentBased", typeof(bool));
    
            var countBasedParameter = countBased.HasValue ?
                new ObjectParameter("countBased", countBased) :
                new ObjectParameter("countBased", typeof(bool));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("currentUserId", currentUserId) :
                new ObjectParameter("currentUserId", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spThresholdSearch_Result>("spThresholdSearch", provinceIdParameter, universityIdParameter, networkIdParameter, syndromIdParameter, methodIdParameter, preProcessMethodParameter, percentBasedParameter, countBasedParameter, currentUserIdParameter, skipParameter, takeParameter);
        }
    
        public virtual ObjectResult<spCorporateHasVisit_Result> spCorporateHasVisit(Nullable<int> userId, Nullable<int> currentUserId, Nullable<long> centerId, string date)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("currentUserId", currentUserId) :
                new ObjectParameter("currentUserId", typeof(int));
    
            var centerIdParameter = centerId.HasValue ?
                new ObjectParameter("centerId", centerId) :
                new ObjectParameter("centerId", typeof(long));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCorporateHasVisit_Result>("spCorporateHasVisit", userIdParameter, currentUserIdParameter, centerIdParameter, dateParameter);
        }
    
        public virtual ObjectResult<spGetVisitByCorporateId_Result> spGetVisitByCorporateId(Nullable<long> corpId, string date)
        {
            var corpIdParameter = corpId.HasValue ?
                new ObjectParameter("corpId", corpId) :
                new ObjectParameter("corpId", typeof(long));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetVisitByCorporateId_Result>("spGetVisitByCorporateId", corpIdParameter, dateParameter);
        }
    
        public virtual ObjectResult<spSearchVisits_Result> spSearchVisits(string province, string university, string networkId, string centerId, string startdate, string enddate, Nullable<bool> missed, Nullable<int> skip, Nullable<int> take, Nullable<int> currentUserId)
        {
            var provinceParameter = province != null ?
                new ObjectParameter("province", province) :
                new ObjectParameter("province", typeof(string));
    
            var universityParameter = university != null ?
                new ObjectParameter("university", university) :
                new ObjectParameter("university", typeof(string));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("CenterId", centerId) :
                new ObjectParameter("CenterId", typeof(string));
    
            var startdateParameter = startdate != null ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(string));
    
            var enddateParameter = enddate != null ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(string));
    
            var missedParameter = missed.HasValue ?
                new ObjectParameter("missed", missed) :
                new ObjectParameter("missed", typeof(bool));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("currentUserId", currentUserId) :
                new ObjectParameter("currentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSearchVisits_Result>("spSearchVisits", provinceParameter, universityParameter, networkIdParameter, centerIdParameter, startdateParameter, enddateParameter, missedParameter, skipParameter, takeParameter, currentUserIdParameter);
        }
    
        public virtual ObjectResult<SpGetHistory_Result> SpGetHistory(string startDate, string endDate, string university, string province, string syndromId, string name, string family, string nationalCode, Nullable<int> skip, Nullable<int> take, string admissionType, string paper, string networkId, string centerId, Nullable<bool> deleted, Nullable<bool> indirect, Nullable<bool> duplicate, Nullable<int> currentUserId)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var universityParameter = university != null ?
                new ObjectParameter("University", university) :
                new ObjectParameter("University", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            var syndromIdParameter = syndromId != null ?
                new ObjectParameter("SyndromId", syndromId) :
                new ObjectParameter("SyndromId", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var familyParameter = family != null ?
                new ObjectParameter("Family", family) :
                new ObjectParameter("Family", typeof(string));
    
            var nationalCodeParameter = nationalCode != null ?
                new ObjectParameter("NationalCode", nationalCode) :
                new ObjectParameter("NationalCode", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var admissionTypeParameter = admissionType != null ?
                new ObjectParameter("AdmissionType", admissionType) :
                new ObjectParameter("AdmissionType", typeof(string));
    
            var paperParameter = paper != null ?
                new ObjectParameter("Paper", paper) :
                new ObjectParameter("Paper", typeof(string));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("CenterId", centerId) :
                new ObjectParameter("CenterId", typeof(string));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            var indirectParameter = indirect.HasValue ?
                new ObjectParameter("Indirect", indirect) :
                new ObjectParameter("Indirect", typeof(bool));
    
            var duplicateParameter = duplicate.HasValue ?
                new ObjectParameter("Duplicate", duplicate) :
                new ObjectParameter("Duplicate", typeof(bool));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetHistory_Result>("SpGetHistory", startDateParameter, endDateParameter, universityParameter, provinceParameter, syndromIdParameter, nameParameter, familyParameter, nationalCodeParameter, skipParameter, takeParameter, admissionTypeParameter, paperParameter, networkIdParameter, centerIdParameter, deletedParameter, indirectParameter, duplicateParameter, currentUserIdParameter);
        }
    
        public virtual ObjectResult<spGetToxins_Result> spGetToxins(Nullable<int> diseaseId)
        {
            var diseaseIdParameter = diseaseId.HasValue ?
                new ObjectParameter("diseaseId", diseaseId) :
                new ObjectParameter("diseaseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetToxins_Result>("spGetToxins", diseaseIdParameter);
        }
    
        public virtual ObjectResult<spGetCorpTypesWithTheSameLevel_Result> spGetCorpTypesWithTheSameLevel(Nullable<int> corpTypeCode)
        {
            var corpTypeCodeParameter = corpTypeCode.HasValue ?
                new ObjectParameter("corpTypeCode", corpTypeCode) :
                new ObjectParameter("corpTypeCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCorpTypesWithTheSameLevel_Result>("spGetCorpTypesWithTheSameLevel", corpTypeCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGetCorpType(Nullable<long> corpId)
        {
            var corpIdParameter = corpId.HasValue ?
                new ObjectParameter("corpId", corpId) :
                new ObjectParameter("corpId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGetCorpType", corpIdParameter);
        }
    
        public virtual ObjectResult<spSearchPosition_Result> spSearchPosition(string name, Nullable<int> skip, Nullable<int> take)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSearchPosition_Result>("spSearchPosition", nameParameter, skipParameter, takeParameter);
        }
    
        public virtual ObjectResult<spGetNonSystemPermissions_Result> spGetNonSystemPermissions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetNonSystemPermissions_Result>("spGetNonSystemPermissions");
        }
    
        public virtual ObjectResult<Nullable<int>> spSavePosition(Nullable<int> id, string name, Nullable<int> parentId, string permissions)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("parentId", parentId) :
                new ObjectParameter("parentId", typeof(int));
    
            var permissionsParameter = permissions != null ?
                new ObjectParameter("permissions", permissions) :
                new ObjectParameter("permissions", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spSavePosition", idParameter, nameParameter, parentIdParameter, permissionsParameter);
        }
    
        public virtual ObjectResult<spGetPermissionsByPositionId_Result> spGetPermissionsByPositionId(Nullable<int> positionId)
        {
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("positionId", positionId) :
                new ObjectParameter("positionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPermissionsByPositionId_Result>("spGetPermissionsByPositionId", positionIdParameter);
        }
    
        public virtual ObjectResult<SpSearchLab_Result> SpSearchLab(string universityId, string provinceId, string networkId, string centerId, string startDate, string endDate, string syndromId, string name, string family, string nationalCode, string primaryLabResult, string paper, Nullable<int> skip, Nullable<int> take, Nullable<int> currentUserId, Nullable<bool> deleted)
        {
            var universityIdParameter = universityId != null ?
                new ObjectParameter("UniversityId", universityId) :
                new ObjectParameter("UniversityId", typeof(string));
    
            var provinceIdParameter = provinceId != null ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(string));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("CenterId", centerId) :
                new ObjectParameter("CenterId", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var syndromIdParameter = syndromId != null ?
                new ObjectParameter("SyndromId", syndromId) :
                new ObjectParameter("SyndromId", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var familyParameter = family != null ?
                new ObjectParameter("Family", family) :
                new ObjectParameter("Family", typeof(string));
    
            var nationalCodeParameter = nationalCode != null ?
                new ObjectParameter("NationalCode", nationalCode) :
                new ObjectParameter("NationalCode", typeof(string));
    
            var primaryLabResultParameter = primaryLabResult != null ?
                new ObjectParameter("PrimaryLabResult", primaryLabResult) :
                new ObjectParameter("PrimaryLabResult", typeof(string));
    
            var paperParameter = paper != null ?
                new ObjectParameter("Paper", paper) :
                new ObjectParameter("Paper", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpSearchLab_Result>("SpSearchLab", universityIdParameter, provinceIdParameter, networkIdParameter, centerIdParameter, startDateParameter, endDateParameter, syndromIdParameter, nameParameter, familyParameter, nationalCodeParameter, primaryLabResultParameter, paperParameter, skipParameter, takeParameter, currentUserIdParameter, deletedParameter);
        }
    
        public virtual ObjectResult<spGetEpidemicMinReport_Result> spGetEpidemicMinReport(string provinceId, string universityId, string networkId, string centerId, string startDate, string endDate, string syndromId, string type, Nullable<int> currentUserId)
        {
            var provinceIdParameter = provinceId != null ?
                new ObjectParameter("provinceId", provinceId) :
                new ObjectParameter("provinceId", typeof(string));
    
            var universityIdParameter = universityId != null ?
                new ObjectParameter("universityId", universityId) :
                new ObjectParameter("universityId", typeof(string));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("networkId", networkId) :
                new ObjectParameter("networkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("centerId", centerId) :
                new ObjectParameter("centerId", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(string));
    
            var syndromIdParameter = syndromId != null ?
                new ObjectParameter("syndromId", syndromId) :
                new ObjectParameter("syndromId", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("currentUserId", currentUserId) :
                new ObjectParameter("currentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEpidemicMinReport_Result>("spGetEpidemicMinReport", provinceIdParameter, universityIdParameter, networkIdParameter, centerIdParameter, startDateParameter, endDateParameter, syndromIdParameter, typeParameter, currentUserIdParameter);
        }
    
        public virtual ObjectResult<spGetEpidemicMinFlowReport_Result> spGetEpidemicMinFlowReport(string provinceId, string universityId, string networkId, string centerId, string startDate, string endDate, string syndromId, string type, Nullable<int> currentUserId)
        {
            var provinceIdParameter = provinceId != null ?
                new ObjectParameter("provinceId", provinceId) :
                new ObjectParameter("provinceId", typeof(string));
    
            var universityIdParameter = universityId != null ?
                new ObjectParameter("universityId", universityId) :
                new ObjectParameter("universityId", typeof(string));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("networkId", networkId) :
                new ObjectParameter("networkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("centerId", centerId) :
                new ObjectParameter("centerId", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(string));
    
            var syndromIdParameter = syndromId != null ?
                new ObjectParameter("syndromId", syndromId) :
                new ObjectParameter("syndromId", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("currentUserId", currentUserId) :
                new ObjectParameter("currentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEpidemicMinFlowReport_Result>("spGetEpidemicMinFlowReport", provinceIdParameter, universityIdParameter, networkIdParameter, centerIdParameter, startDateParameter, endDateParameter, syndromIdParameter, typeParameter, currentUserIdParameter);
        }
    
        public virtual ObjectResult<spGetSyndromRegisterForNetwork_Result> spGetSyndromRegisterForNetwork(Nullable<long> networkId, string fromDate, string toDate)
        {
            var networkIdParameter = networkId.HasValue ?
                new ObjectParameter("networkId", networkId) :
                new ObjectParameter("networkId", typeof(long));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSyndromRegisterForNetwork_Result>("spGetSyndromRegisterForNetwork", networkIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<spGetEpidemicMaxReport_Result> spGetEpidemicMaxReport(string provinceId, string universityId, string networkId, string centerId, string startDate, string endDate, string syndromId, string type, Nullable<int> currentUserId, Nullable<bool> standing, Nullable<bool> admitted, Nullable<bool> died, Nullable<bool> positive, Nullable<bool> negative, Nullable<bool> reject, Nullable<bool> noSample, Nullable<bool> animalTouch)
        {
            var provinceIdParameter = provinceId != null ?
                new ObjectParameter("provinceId", provinceId) :
                new ObjectParameter("provinceId", typeof(string));
    
            var universityIdParameter = universityId != null ?
                new ObjectParameter("universityId", universityId) :
                new ObjectParameter("universityId", typeof(string));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("networkId", networkId) :
                new ObjectParameter("networkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("centerId", centerId) :
                new ObjectParameter("centerId", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(string));
    
            var syndromIdParameter = syndromId != null ?
                new ObjectParameter("syndromId", syndromId) :
                new ObjectParameter("syndromId", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("currentUserId", currentUserId) :
                new ObjectParameter("currentUserId", typeof(int));
    
            var standingParameter = standing.HasValue ?
                new ObjectParameter("standing", standing) :
                new ObjectParameter("standing", typeof(bool));
    
            var admittedParameter = admitted.HasValue ?
                new ObjectParameter("admitted", admitted) :
                new ObjectParameter("admitted", typeof(bool));
    
            var diedParameter = died.HasValue ?
                new ObjectParameter("died", died) :
                new ObjectParameter("died", typeof(bool));
    
            var positiveParameter = positive.HasValue ?
                new ObjectParameter("positive", positive) :
                new ObjectParameter("positive", typeof(bool));
    
            var negativeParameter = negative.HasValue ?
                new ObjectParameter("negative", negative) :
                new ObjectParameter("negative", typeof(bool));
    
            var rejectParameter = reject.HasValue ?
                new ObjectParameter("reject", reject) :
                new ObjectParameter("reject", typeof(bool));
    
            var noSampleParameter = noSample.HasValue ?
                new ObjectParameter("noSample", noSample) :
                new ObjectParameter("noSample", typeof(bool));
    
            var animalTouchParameter = animalTouch.HasValue ?
                new ObjectParameter("animalTouch", animalTouch) :
                new ObjectParameter("animalTouch", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEpidemicMaxReport_Result>("spGetEpidemicMaxReport", provinceIdParameter, universityIdParameter, networkIdParameter, centerIdParameter, startDateParameter, endDateParameter, syndromIdParameter, typeParameter, currentUserIdParameter, standingParameter, admittedParameter, diedParameter, positiveParameter, negativeParameter, rejectParameter, noSampleParameter, animalTouchParameter);
        }
    
        public virtual ObjectResult<spListTotalVisits_Result> spListTotalVisits(string provinceId, string universityId, string networkId, string centerId, string startDate, string endDate, Nullable<int> currentUserId)
        {
            var provinceIdParameter = provinceId != null ?
                new ObjectParameter("provinceId", provinceId) :
                new ObjectParameter("provinceId", typeof(string));
    
            var universityIdParameter = universityId != null ?
                new ObjectParameter("universityId", universityId) :
                new ObjectParameter("universityId", typeof(string));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("networkId", networkId) :
                new ObjectParameter("networkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("centerId", centerId) :
                new ObjectParameter("centerId", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("currentUserId", currentUserId) :
                new ObjectParameter("currentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spListTotalVisits_Result>("spListTotalVisits", provinceIdParameter, universityIdParameter, networkIdParameter, centerIdParameter, startDateParameter, endDateParameter, currentUserIdParameter);
        }
    
        public virtual ObjectResult<spGetNetworkLabs_Result> spGetNetworkLabs(Nullable<long> labId, Nullable<int> currentUserId)
        {
            var labIdParameter = labId.HasValue ?
                new ObjectParameter("labId", labId) :
                new ObjectParameter("labId", typeof(long));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("currentUserId", currentUserId) :
                new ObjectParameter("currentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetNetworkLabs_Result>("spGetNetworkLabs", labIdParameter, currentUserIdParameter);
        }
    
        public virtual ObjectResult<spGetCenterLabs_Result> spGetCenterLabs(Nullable<long> labId, Nullable<long> networkLabId, Nullable<int> currentUserId)
        {
            var labIdParameter = labId.HasValue ?
                new ObjectParameter("labId", labId) :
                new ObjectParameter("labId", typeof(long));
    
            var networkLabIdParameter = networkLabId.HasValue ?
                new ObjectParameter("networkLabId", networkLabId) :
                new ObjectParameter("networkLabId", typeof(long));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("currentUserId", currentUserId) :
                new ObjectParameter("currentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCenterLabs_Result>("spGetCenterLabs", labIdParameter, networkLabIdParameter, currentUserIdParameter);
        }
    
        public virtual ObjectResult<SpSearchLab_Result> SpSearchLabForLabUsers(string labId, string universityId, string provinceId, string networkId, string centerId, string startDate, string endDate, string syndromId, string name, string family, string nationalCode, string primaryLabResult, string paper, Nullable<int> skip, Nullable<int> take, Nullable<bool> showSubLabs, string subLabId, Nullable<bool> deleted, string datetype)
        {
            var labIdParameter = labId != null ?
                new ObjectParameter("LabId", labId) :
                new ObjectParameter("LabId", typeof(string));
    
            var universityIdParameter = universityId != null ?
                new ObjectParameter("UniversityId", universityId) :
                new ObjectParameter("UniversityId", typeof(string));
    
            var provinceIdParameter = provinceId != null ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(string));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("CenterId", centerId) :
                new ObjectParameter("CenterId", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var syndromIdParameter = syndromId != null ?
                new ObjectParameter("SyndromId", syndromId) :
                new ObjectParameter("SyndromId", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var familyParameter = family != null ?
                new ObjectParameter("Family", family) :
                new ObjectParameter("Family", typeof(string));
    
            var nationalCodeParameter = nationalCode != null ?
                new ObjectParameter("NationalCode", nationalCode) :
                new ObjectParameter("NationalCode", typeof(string));
    
            var primaryLabResultParameter = primaryLabResult != null ?
                new ObjectParameter("PrimaryLabResult", primaryLabResult) :
                new ObjectParameter("PrimaryLabResult", typeof(string));
    
            var paperParameter = paper != null ?
                new ObjectParameter("Paper", paper) :
                new ObjectParameter("Paper", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var showSubLabsParameter = showSubLabs.HasValue ?
                new ObjectParameter("showSubLabs", showSubLabs) :
                new ObjectParameter("showSubLabs", typeof(bool));
    
            var subLabIdParameter = subLabId != null ?
                new ObjectParameter("subLabId", subLabId) :
                new ObjectParameter("subLabId", typeof(string));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            var datetypeParameter = datetype != null ?
                new ObjectParameter("Datetype", datetype) :
                new ObjectParameter("Datetype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpSearchLab_Result>("SpSearchLabForLabUsers", labIdParameter, universityIdParameter, provinceIdParameter, networkIdParameter, centerIdParameter, startDateParameter, endDateParameter, syndromIdParameter, nameParameter, familyParameter, nationalCodeParameter, primaryLabResultParameter, paperParameter, skipParameter, takeParameter, showSubLabsParameter, subLabIdParameter, deletedParameter, datetypeParameter);
        }
    
        public virtual ObjectResult<GetLog_Result> GetLog(string provinceId, string universityId, string networkId, string centerId, string subCenterId, Nullable<int> currentUserId, string fromDate, string toDate, string userName, string firstname, string lastname, string actionTypeId, Nullable<int> take, Nullable<int> skip)
        {
            var provinceIdParameter = provinceId != null ?
                new ObjectParameter("provinceId", provinceId) :
                new ObjectParameter("provinceId", typeof(string));
    
            var universityIdParameter = universityId != null ?
                new ObjectParameter("universityId", universityId) :
                new ObjectParameter("universityId", typeof(string));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("networkId", networkId) :
                new ObjectParameter("networkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("centerId", centerId) :
                new ObjectParameter("centerId", typeof(string));
    
            var subCenterIdParameter = subCenterId != null ?
                new ObjectParameter("subCenterId", subCenterId) :
                new ObjectParameter("subCenterId", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("currentUserId", currentUserId) :
                new ObjectParameter("currentUserId", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var actionTypeIdParameter = actionTypeId != null ?
                new ObjectParameter("actionTypeId", actionTypeId) :
                new ObjectParameter("actionTypeId", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLog_Result>("GetLog", provinceIdParameter, universityIdParameter, networkIdParameter, centerIdParameter, subCenterIdParameter, currentUserIdParameter, fromDateParameter, toDateParameter, userNameParameter, firstnameParameter, lastnameParameter, actionTypeIdParameter, takeParameter, skipParameter);
        }
    
        public virtual ObjectResult<spGetProvinceUniversities_Result> spGetProvinceUniversities(Nullable<int> provinceId, Nullable<int> userId)
        {
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("provinceId", provinceId) :
                new ObjectParameter("provinceId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProvinceUniversities_Result>("spGetProvinceUniversities", provinceIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<spGetEpidemicMaxFlowReport_Result> spGetEpidemicMaxFlowReport(string provinceId, string universityId, string networkId, string centerId, string startDate, string endDate, string syndromId, string type, Nullable<int> currentUserId, Nullable<bool> standing, Nullable<bool> admitted, Nullable<bool> died, Nullable<bool> positive, Nullable<bool> negative, Nullable<bool> reject, Nullable<bool> noSample, Nullable<bool> animalTouch)
        {
            var provinceIdParameter = provinceId != null ?
                new ObjectParameter("provinceId", provinceId) :
                new ObjectParameter("provinceId", typeof(string));
    
            var universityIdParameter = universityId != null ?
                new ObjectParameter("universityId", universityId) :
                new ObjectParameter("universityId", typeof(string));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("networkId", networkId) :
                new ObjectParameter("networkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("centerId", centerId) :
                new ObjectParameter("centerId", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(string));
    
            var syndromIdParameter = syndromId != null ?
                new ObjectParameter("syndromId", syndromId) :
                new ObjectParameter("syndromId", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("currentUserId", currentUserId) :
                new ObjectParameter("currentUserId", typeof(int));
    
            var standingParameter = standing.HasValue ?
                new ObjectParameter("standing", standing) :
                new ObjectParameter("standing", typeof(bool));
    
            var admittedParameter = admitted.HasValue ?
                new ObjectParameter("admitted", admitted) :
                new ObjectParameter("admitted", typeof(bool));
    
            var diedParameter = died.HasValue ?
                new ObjectParameter("died", died) :
                new ObjectParameter("died", typeof(bool));
    
            var positiveParameter = positive.HasValue ?
                new ObjectParameter("positive", positive) :
                new ObjectParameter("positive", typeof(bool));
    
            var negativeParameter = negative.HasValue ?
                new ObjectParameter("negative", negative) :
                new ObjectParameter("negative", typeof(bool));
    
            var rejectParameter = reject.HasValue ?
                new ObjectParameter("reject", reject) :
                new ObjectParameter("reject", typeof(bool));
    
            var noSampleParameter = noSample.HasValue ?
                new ObjectParameter("noSample", noSample) :
                new ObjectParameter("noSample", typeof(bool));
    
            var animalTouchParameter = animalTouch.HasValue ?
                new ObjectParameter("animalTouch", animalTouch) :
                new ObjectParameter("animalTouch", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEpidemicMaxFlowReport_Result>("spGetEpidemicMaxFlowReport", provinceIdParameter, universityIdParameter, networkIdParameter, centerIdParameter, startDateParameter, endDateParameter, syndromIdParameter, typeParameter, currentUserIdParameter, standingParameter, admittedParameter, diedParameter, positiveParameter, negativeParameter, rejectParameter, noSampleParameter, animalTouchParameter);
        }
    
        public virtual ObjectResult<SpGetAdmissionLabResultDetails_Result> SpGetLabResultDetails(Nullable<int> labResultId)
        {
            var labResultIdParameter = labResultId.HasValue ?
                new ObjectParameter("labResultId", labResultId) :
                new ObjectParameter("labResultId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAdmissionLabResultDetails_Result>("SpGetLabResultDetails", labResultIdParameter);
        }
    
        public virtual ObjectResult<SpGetAdmissionLabResults_Result> SpGetLabResults(Nullable<int> labResultId)
        {
            var labResultIdParameter = labResultId.HasValue ?
                new ObjectParameter("labResultId", labResultId) :
                new ObjectParameter("labResultId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAdmissionLabResults_Result>("SpGetLabResults", labResultIdParameter);
        }
    
        public virtual ObjectResult<SpGetDiseasesAccess_Result> SpGetDiseasesAccess(Nullable<int> diseasesId)
        {
            var diseasesIdParameter = diseasesId.HasValue ?
                new ObjectParameter("DiseasesId", diseasesId) :
                new ObjectParameter("DiseasesId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDiseasesAccess_Result>("SpGetDiseasesAccess", diseasesIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> spUserHasUnverifiedThresholdWarning(Nullable<int> currentUserId)
        {
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("currentUserId", currentUserId) :
                new ObjectParameter("currentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spUserHasUnverifiedThresholdWarning", currentUserIdParameter);
        }
    
        public virtual ObjectResult<spGetThresholdWarningReceivers_Managers_Result> spGetThresholdWarningReceivers_Managers(Nullable<long> networkId)
        {
            var networkIdParameter = networkId.HasValue ?
                new ObjectParameter("networkId", networkId) :
                new ObjectParameter("networkId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetThresholdWarningReceivers_Managers_Result>("spGetThresholdWarningReceivers_Managers", networkIdParameter);
        }
    
        public virtual ObjectResult<spGetLabsBySampleResultCount_Result> spGetLabsBySampleResultCount(string provinceId, string universityId, string networkId, string centerId, string startDate, string endDate, Nullable<int> currentUserId, Nullable<int> skip, Nullable<int> take)
        {
            var provinceIdParameter = provinceId != null ?
                new ObjectParameter("provinceId", provinceId) :
                new ObjectParameter("provinceId", typeof(string));
    
            var universityIdParameter = universityId != null ?
                new ObjectParameter("universityId", universityId) :
                new ObjectParameter("universityId", typeof(string));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("CenterId", centerId) :
                new ObjectParameter("CenterId", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("currentUserId", currentUserId) :
                new ObjectParameter("currentUserId", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLabsBySampleResultCount_Result>("spGetLabsBySampleResultCount", provinceIdParameter, universityIdParameter, networkIdParameter, centerIdParameter, startDateParameter, endDateParameter, currentUserIdParameter, skipParameter, takeParameter);
        }
    
        public virtual ObjectResult<GetProSyndromDitailsWithIds_Result> GetProSyndromDitailsWithIds(string admissionIds)
        {
            var admissionIdsParameter = admissionIds != null ?
                new ObjectParameter("AdmissionIds", admissionIds) :
                new ObjectParameter("AdmissionIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProSyndromDitailsWithIds_Result>("GetProSyndromDitailsWithIds", admissionIdsParameter);
        }
    
        public virtual ObjectResult<GetProSyndromDitailsPatientInformationWithIDs_Result> GetProSyndromDitailsPatientInformationWithIDs(string admissionIds)
        {
            var admissionIdsParameter = admissionIds != null ?
                new ObjectParameter("AdmissionIds", admissionIds) :
                new ObjectParameter("AdmissionIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProSyndromDitailsPatientInformationWithIDs_Result>("GetProSyndromDitailsPatientInformationWithIDs", admissionIdsParameter);
        }
    
        public virtual ObjectResult<Sp_SearchDisease_Result> Sp_SearchDisease(Nullable<int> syndromId, Nullable<int> diseaseId, Nullable<int> skip, Nullable<int> take)
        {
            var syndromIdParameter = syndromId.HasValue ?
                new ObjectParameter("syndromId", syndromId) :
                new ObjectParameter("syndromId", typeof(int));
    
            var diseaseIdParameter = diseaseId.HasValue ?
                new ObjectParameter("diseaseId", diseaseId) :
                new ObjectParameter("diseaseId", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_SearchDisease_Result>("Sp_SearchDisease", syndromIdParameter, diseaseIdParameter, skipParameter, takeParameter);
        }
    
        public virtual ObjectResult<spGetSubLabs_Result> spGetSubLabs(Nullable<long> labId)
        {
            var labIdParameter = labId.HasValue ?
                new ObjectParameter("labId", labId) :
                new ObjectParameter("labId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSubLabs_Result>("spGetSubLabs", labIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGetAdmissionIdByLabResult(Nullable<int> labResultId)
        {
            var labResultIdParameter = labResultId.HasValue ?
                new ObjectParameter("labResultId", labResultId) :
                new ObjectParameter("labResultId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGetAdmissionIdByLabResult", labResultIdParameter);
        }
    
        public virtual ObjectResult<spSearchPhone_Result> spSearchPhone(string firstname, string lastname, string mobile, Nullable<int> skip, Nullable<int> take, ObjectParameter totalRecords)
        {
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSearchPhone_Result>("spSearchPhone", firstnameParameter, lastnameParameter, mobileParameter, skipParameter, takeParameter, totalRecords);
        }
    
        public virtual ObjectResult<SpGetReportHistory_Result> SpGetReportHistory(string pName, string unId, string syndromId, Nullable<int> currentUserId)
        {
            var pNameParameter = pName != null ?
                new ObjectParameter("pName", pName) :
                new ObjectParameter("pName", typeof(string));
    
            var unIdParameter = unId != null ?
                new ObjectParameter("unId", unId) :
                new ObjectParameter("unId", typeof(string));
    
            var syndromIdParameter = syndromId != null ?
                new ObjectParameter("SyndromId", syndromId) :
                new ObjectParameter("SyndromId", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetReportHistory_Result>("SpGetReportHistory", pNameParameter, unIdParameter, syndromIdParameter, currentUserIdParameter);
        }
    
        public virtual ObjectResult<SpGetHistoryReportHeidari_Result> SpGetHistoryReportHeidari(string univercity, string syndromic, string city, Nullable<int> userID, Nullable<int> skip, Nullable<int> take, ObjectParameter totalRecords)
        {
            var univercityParameter = univercity != null ?
                new ObjectParameter("Univercity", univercity) :
                new ObjectParameter("Univercity", typeof(string));
    
            var syndromicParameter = syndromic != null ?
                new ObjectParameter("Syndromic", syndromic) :
                new ObjectParameter("Syndromic", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetHistoryReportHeidari_Result>("SpGetHistoryReportHeidari", univercityParameter, syndromicParameter, cityParameter, userIDParameter, skipParameter, takeParameter, totalRecords);
        }
    
        public virtual ObjectResult<SpGetHistoryReportHeidarii_Result> SpGetHistoryReportHeidarii(string univercity, string syndromic, string city, Nullable<int> userID, Nullable<int> skip, Nullable<int> take, ObjectParameter totalRecords)
        {
            var univercityParameter = univercity != null ?
                new ObjectParameter("Univercity", univercity) :
                new ObjectParameter("Univercity", typeof(string));
    
            var syndromicParameter = syndromic != null ?
                new ObjectParameter("Syndromic", syndromic) :
                new ObjectParameter("Syndromic", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetHistoryReportHeidarii_Result>("SpGetHistoryReportHeidarii", univercityParameter, syndromicParameter, cityParameter, userIDParameter, skipParameter, takeParameter, totalRecords);
        }
    
        public virtual ObjectResult<f_GetStudent_Result> f_GetStudent(string name, string family, string grade, Nullable<int> skip, Nullable<int> take, ObjectParameter totalRecords)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var familyParameter = family != null ?
                new ObjectParameter("Family", family) :
                new ObjectParameter("Family", typeof(string));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_GetStudent_Result>("f_GetStudent", nameParameter, familyParameter, gradeParameter, skipParameter, takeParameter, totalRecords);
        }
    
        public virtual ObjectResult<spMyReport_Result> spMyReport(string startDate, string endDate, string university, string province, string syndromId, Nullable<int> skip, Nullable<int> take, string networkId, string centerId, Nullable<int> currentUserId)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var universityParameter = university != null ?
                new ObjectParameter("University", university) :
                new ObjectParameter("University", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            var syndromIdParameter = syndromId != null ?
                new ObjectParameter("SyndromId", syndromId) :
                new ObjectParameter("SyndromId", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("CenterId", centerId) :
                new ObjectParameter("CenterId", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spMyReport_Result>("spMyReport", startDateParameter, endDateParameter, universityParameter, provinceParameter, syndromIdParameter, skipParameter, takeParameter, networkIdParameter, centerIdParameter, currentUserIdParameter);
        }
    
        public virtual ObjectResult<SpGetHistoryGrouped_Jafari_Result> SpGetHistoryGrouped_Jafari(string startDate, string endDate, string university, string province, string syndromId, Nullable<int> skip, Nullable<int> take, string networkId, string centerId, Nullable<int> currentUserId)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var universityParameter = university != null ?
                new ObjectParameter("University", university) :
                new ObjectParameter("University", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            var syndromIdParameter = syndromId != null ?
                new ObjectParameter("SyndromId", syndromId) :
                new ObjectParameter("SyndromId", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("CenterId", centerId) :
                new ObjectParameter("CenterId", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetHistoryGrouped_Jafari_Result>("SpGetHistoryGrouped_Jafari", startDateParameter, endDateParameter, universityParameter, provinceParameter, syndromIdParameter, skipParameter, takeParameter, networkIdParameter, centerIdParameter, currentUserIdParameter);
        }
    
        public virtual ObjectResult<SpGetHistoryGrouped_Jafarii_Result> SpGetHistoryGrouped_Jafarii(string startDate, string endDate, string university, string province, string syndromId, Nullable<int> skip, Nullable<int> take, string networkId, string centerId, Nullable<int> currentUserId)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var universityParameter = university != null ?
                new ObjectParameter("University", university) :
                new ObjectParameter("University", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            var syndromIdParameter = syndromId != null ?
                new ObjectParameter("SyndromId", syndromId) :
                new ObjectParameter("SyndromId", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("CenterId", centerId) :
                new ObjectParameter("CenterId", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetHistoryGrouped_Jafarii_Result>("SpGetHistoryGrouped_Jafarii", startDateParameter, endDateParameter, universityParameter, provinceParameter, syndromIdParameter, skipParameter, takeParameter, networkIdParameter, centerIdParameter, currentUserIdParameter);
        }
    
        public virtual ObjectResult<SpGetHistoryGrouped_Jafari1_Result> SpGetHistoryGrouped_Jafari1(string startDate, string endDate, string university, string province, string syndromId, Nullable<int> skip, Nullable<int> take, string networkId, string centerId, Nullable<int> currentUserId)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var universityParameter = university != null ?
                new ObjectParameter("University", university) :
                new ObjectParameter("University", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            var syndromIdParameter = syndromId != null ?
                new ObjectParameter("SyndromId", syndromId) :
                new ObjectParameter("SyndromId", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("CenterId", centerId) :
                new ObjectParameter("CenterId", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetHistoryGrouped_Jafari1_Result>("SpGetHistoryGrouped_Jafari1", startDateParameter, endDateParameter, universityParameter, provinceParameter, syndromIdParameter, skipParameter, takeParameter, networkIdParameter, centerIdParameter, currentUserIdParameter);
        }
    
        public virtual ObjectResult<spGetMyReport_Result> spGetMyReport(string startDate, string endDate, string university, string province, string syndromId, Nullable<int> skip, Nullable<int> take, string networkId, string centerId, Nullable<int> currentUserId)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var universityParameter = university != null ?
                new ObjectParameter("University", university) :
                new ObjectParameter("University", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            var syndromIdParameter = syndromId != null ?
                new ObjectParameter("SyndromId", syndromId) :
                new ObjectParameter("SyndromId", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("CenterId", centerId) :
                new ObjectParameter("CenterId", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetMyReport_Result>("spGetMyReport", startDateParameter, endDateParameter, universityParameter, provinceParameter, syndromIdParameter, skipParameter, takeParameter, networkIdParameter, centerIdParameter, currentUserIdParameter);
        }
    
        public virtual ObjectResult<spJafari_Result> spJafari(string startDate, string endDate, string university, string province, string syndromId, Nullable<int> skip, Nullable<int> take, string networkId, string centerId, Nullable<int> currentUserId, ObjectParameter totalRecords)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var universityParameter = university != null ?
                new ObjectParameter("University", university) :
                new ObjectParameter("University", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            var syndromIdParameter = syndromId != null ?
                new ObjectParameter("SyndromId", syndromId) :
                new ObjectParameter("SyndromId", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("CenterId", centerId) :
                new ObjectParameter("CenterId", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spJafari_Result>("spJafari", startDateParameter, endDateParameter, universityParameter, provinceParameter, syndromIdParameter, skipParameter, takeParameter, networkIdParameter, centerIdParameter, currentUserIdParameter, totalRecords);
        }
    
        public virtual int CalcCorporatePath()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CalcCorporatePath");
        }
    
        public virtual ObjectResult<CustomSpGetHistory_Result> CustomSpGetHistory(string startDate, string endDate, string university, string province, string syndromId, string name, string family, string nationalCode, Nullable<int> skip, Nullable<int> take, string admissionType, string paper, string networkId, string centerId, Nullable<bool> deleted, Nullable<bool> indirect, Nullable<bool> duplicate, Nullable<int> currentUserId)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var universityParameter = university != null ?
                new ObjectParameter("University", university) :
                new ObjectParameter("University", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            var syndromIdParameter = syndromId != null ?
                new ObjectParameter("SyndromId", syndromId) :
                new ObjectParameter("SyndromId", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var familyParameter = family != null ?
                new ObjectParameter("Family", family) :
                new ObjectParameter("Family", typeof(string));
    
            var nationalCodeParameter = nationalCode != null ?
                new ObjectParameter("NationalCode", nationalCode) :
                new ObjectParameter("NationalCode", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var admissionTypeParameter = admissionType != null ?
                new ObjectParameter("AdmissionType", admissionType) :
                new ObjectParameter("AdmissionType", typeof(string));
    
            var paperParameter = paper != null ?
                new ObjectParameter("Paper", paper) :
                new ObjectParameter("Paper", typeof(string));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("CenterId", centerId) :
                new ObjectParameter("CenterId", typeof(string));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            var indirectParameter = indirect.HasValue ?
                new ObjectParameter("Indirect", indirect) :
                new ObjectParameter("Indirect", typeof(bool));
    
            var duplicateParameter = duplicate.HasValue ?
                new ObjectParameter("Duplicate", duplicate) :
                new ObjectParameter("Duplicate", typeof(bool));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomSpGetHistory_Result>("CustomSpGetHistory", startDateParameter, endDateParameter, universityParameter, provinceParameter, syndromIdParameter, nameParameter, familyParameter, nationalCodeParameter, skipParameter, takeParameter, admissionTypeParameter, paperParameter, networkIdParameter, centerIdParameter, deletedParameter, indirectParameter, duplicateParameter, currentUserIdParameter);
        }
    
        public virtual int GetDepartments(Nullable<int> take, string depart)
        {
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var departParameter = depart != null ?
                new ObjectParameter("Depart", depart) :
                new ObjectParameter("Depart", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDepartments", takeParameter, departParameter);
        }
    
        public virtual ObjectResult<GetDePartments2_Result> GetDePartments2(Nullable<long> code, string name)
        {
            var codeParameter = code.HasValue ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDePartments2_Result>("GetDePartments2", codeParameter, nameParameter);
        }
    
        public virtual int GetLogosTotal(Nullable<int> skip, Nullable<int> take, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string level, string userName, string ip, string logType)
        {
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var levelParameter = level != null ?
                new ObjectParameter("level", level) :
                new ObjectParameter("level", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("ip", ip) :
                new ObjectParameter("ip", typeof(string));
    
            var logTypeParameter = logType != null ?
                new ObjectParameter("logType", logType) :
                new ObjectParameter("logType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetLogosTotal", skipParameter, takeParameter, fromDateParameter, toDateParameter, levelParameter, userNameParameter, ipParameter, logTypeParameter);
        }
    
        public virtual int GetLogs(Nullable<int> take, Nullable<int> skip, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string level, string userName, string ip, string logType)
        {
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var levelParameter = level != null ?
                new ObjectParameter("Level", level) :
                new ObjectParameter("Level", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("Ip", ip) :
                new ObjectParameter("Ip", typeof(string));
    
            var logTypeParameter = logType != null ?
                new ObjectParameter("LogType", logType) :
                new ObjectParameter("LogType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetLogs", takeParameter, skipParameter, fromDateParameter, toDateParameter, levelParameter, userNameParameter, ipParameter, logTypeParameter);
        }
    
        public virtual ObjectResult<GetRule_Result> GetRule(Nullable<int> groupId)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRule_Result>("GetRule", groupIdParameter);
        }
    
        public virtual ObjectResult<GetRuleExtension_Result> GetRuleExtension(Nullable<int> groupId)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRuleExtension_Result>("GetRuleExtension", groupIdParameter);
        }
    
        public virtual int GetUsers(Nullable<int> take, Nullable<int> skip, string firstName, string lastName, string code, string userName, string position, string system, string userGroup, string permission, Nullable<long> corporateId, Nullable<bool> searchSubCorporates)
        {
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            var systemParameter = system != null ?
                new ObjectParameter("System", system) :
                new ObjectParameter("System", typeof(string));
    
            var userGroupParameter = userGroup != null ?
                new ObjectParameter("UserGroup", userGroup) :
                new ObjectParameter("UserGroup", typeof(string));
    
            var permissionParameter = permission != null ?
                new ObjectParameter("Permission", permission) :
                new ObjectParameter("Permission", typeof(string));
    
            var corporateIdParameter = corporateId.HasValue ?
                new ObjectParameter("CorporateId", corporateId) :
                new ObjectParameter("CorporateId", typeof(long));
    
            var searchSubCorporatesParameter = searchSubCorporates.HasValue ?
                new ObjectParameter("SearchSubCorporates", searchSubCorporates) :
                new ObjectParameter("SearchSubCorporates", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUsers", takeParameter, skipParameter, firstNameParameter, lastNameParameter, codeParameter, userNameParameter, positionParameter, systemParameter, userGroupParameter, permissionParameter, corporateIdParameter, searchSubCorporatesParameter);
        }
    
        public virtual int GetUsersTotal(Nullable<int> take, Nullable<int> skip, string firstName, string lastName, string code, string userName, string position, string system, string userGroup, string permission, Nullable<long> corporateId, Nullable<bool> searchSubCorporates)
        {
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            var systemParameter = system != null ?
                new ObjectParameter("System", system) :
                new ObjectParameter("System", typeof(string));
    
            var userGroupParameter = userGroup != null ?
                new ObjectParameter("UserGroup", userGroup) :
                new ObjectParameter("UserGroup", typeof(string));
    
            var permissionParameter = permission != null ?
                new ObjectParameter("Permission", permission) :
                new ObjectParameter("Permission", typeof(string));
    
            var corporateIdParameter = corporateId.HasValue ?
                new ObjectParameter("CorporateId", corporateId) :
                new ObjectParameter("CorporateId", typeof(long));
    
            var searchSubCorporatesParameter = searchSubCorporates.HasValue ?
                new ObjectParameter("SearchSubCorporates", searchSubCorporates) :
                new ObjectParameter("SearchSubCorporates", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUsersTotal", takeParameter, skipParameter, firstNameParameter, lastNameParameter, codeParameter, userNameParameter, positionParameter, systemParameter, userGroupParameter, permissionParameter, corporateIdParameter, searchSubCorporatesParameter);
        }
    
        public virtual ObjectResult<string> pTempTest(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("pTempTest", idParameter);
        }
    
        public virtual int RunRule(Nullable<int> groupId, Nullable<int> changeUserId, string changeDate, string iP)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var changeUserIdParameter = changeUserId.HasValue ?
                new ObjectParameter("ChangeUserId", changeUserId) :
                new ObjectParameter("ChangeUserId", typeof(int));
    
            var changeDateParameter = changeDate != null ?
                new ObjectParameter("ChangeDate", changeDate) :
                new ObjectParameter("ChangeDate", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RunRule", groupIdParameter, changeUserIdParameter, changeDateParameter, iPParameter);
        }
    
        public virtual int SetupUserForSelfReportingSystem(string ip, string customerNo, string documentNo)
        {
            var ipParameter = ip != null ?
                new ObjectParameter("Ip", ip) :
                new ObjectParameter("Ip", typeof(string));
    
            var customerNoParameter = customerNo != null ?
                new ObjectParameter("CustomerNo", customerNo) :
                new ObjectParameter("CustomerNo", typeof(string));
    
            var documentNoParameter = documentNo != null ?
                new ObjectParameter("DocumentNo", documentNo) :
                new ObjectParameter("DocumentNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetupUserForSelfReportingSystem", ipParameter, customerNoParameter, documentNoParameter);
        }
    
        public virtual int sp_alterdiagram1(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram1", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram1(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram1", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram1(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram1", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int Sp_GetUserGroups(Nullable<long> userId, Nullable<long> subsytemId, Nullable<long> ssoSystemId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(long));
    
            var subsytemIdParameter = subsytemId.HasValue ?
                new ObjectParameter("SubsytemId", subsytemId) :
                new ObjectParameter("SubsytemId", typeof(long));
    
            var ssoSystemIdParameter = ssoSystemId.HasValue ?
                new ObjectParameter("SsoSystemId", ssoSystemId) :
                new ObjectParameter("SsoSystemId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_GetUserGroups", userIdParameter, subsytemIdParameter, ssoSystemIdParameter);
        }
    
        public virtual int sp_helpdiagramdefinition1(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition1", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams1(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams1", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int Sp_MergDep(Nullable<long> sourceDep, Nullable<long> desDep)
        {
            var sourceDepParameter = sourceDep.HasValue ?
                new ObjectParameter("SourceDep", sourceDep) :
                new ObjectParameter("SourceDep", typeof(long));
    
            var desDepParameter = desDep.HasValue ?
                new ObjectParameter("DesDep", desDep) :
                new ObjectParameter("DesDep", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_MergDep", sourceDepParameter, desDepParameter);
        }
    
        public virtual int SP_MoveDepartrment(Nullable<long> sourcedepartmentId, Nullable<long> desDepartmentId)
        {
            var sourcedepartmentIdParameter = sourcedepartmentId.HasValue ?
                new ObjectParameter("SourcedepartmentId", sourcedepartmentId) :
                new ObjectParameter("SourcedepartmentId", typeof(long));
    
            var desDepartmentIdParameter = desDepartmentId.HasValue ?
                new ObjectParameter("DesDepartmentId", desDepartmentId) :
                new ObjectParameter("DesDepartmentId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MoveDepartrment", sourcedepartmentIdParameter, desDepartmentIdParameter);
        }
    
        public virtual int SP_PassUpdate(string pass, string userName)
        {
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PassUpdate", passParameter, userNameParameter);
        }
    
        public virtual int sp_renamediagram1(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram1", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<string> Sp_UpdateNode(Nullable<long> parentId, Nullable<long> id, string code, string name, string latinName)
        {
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(long));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var latinNameParameter = latinName != null ?
                new ObjectParameter("LatinName", latinName) :
                new ObjectParameter("LatinName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Sp_UpdateNode", parentIdParameter, idParameter, codeParameter, nameParameter, latinNameParameter);
        }
    
        public virtual int sp_upgraddiagrams1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams1");
        }
    
        public virtual ObjectResult<SP_XSpGetHistory_Result> SP_XSpGetHistory(string startDate, string endDate, string university, string province, string syndromId, string name, string family, string nationalCode, Nullable<int> skip, Nullable<int> take, string admissionType, string paper, string networkId, string centerId, Nullable<bool> deleted, Nullable<bool> indirect, Nullable<bool> duplicate, Nullable<int> currentUserId)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var universityParameter = university != null ?
                new ObjectParameter("University", university) :
                new ObjectParameter("University", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            var syndromIdParameter = syndromId != null ?
                new ObjectParameter("SyndromId", syndromId) :
                new ObjectParameter("SyndromId", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var familyParameter = family != null ?
                new ObjectParameter("Family", family) :
                new ObjectParameter("Family", typeof(string));
    
            var nationalCodeParameter = nationalCode != null ?
                new ObjectParameter("NationalCode", nationalCode) :
                new ObjectParameter("NationalCode", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var admissionTypeParameter = admissionType != null ?
                new ObjectParameter("AdmissionType", admissionType) :
                new ObjectParameter("AdmissionType", typeof(string));
    
            var paperParameter = paper != null ?
                new ObjectParameter("Paper", paper) :
                new ObjectParameter("Paper", typeof(string));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("CenterId", centerId) :
                new ObjectParameter("CenterId", typeof(string));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            var indirectParameter = indirect.HasValue ?
                new ObjectParameter("Indirect", indirect) :
                new ObjectParameter("Indirect", typeof(bool));
    
            var duplicateParameter = duplicate.HasValue ?
                new ObjectParameter("Duplicate", duplicate) :
                new ObjectParameter("Duplicate", typeof(bool));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_XSpGetHistory_Result>("SP_XSpGetHistory", startDateParameter, endDateParameter, universityParameter, provinceParameter, syndromIdParameter, nameParameter, familyParameter, nationalCodeParameter, skipParameter, takeParameter, admissionTypeParameter, paperParameter, networkIdParameter, centerIdParameter, deletedParameter, indirectParameter, duplicateParameter, currentUserIdParameter);
        }
    
        public virtual ObjectResult<SpGetAgregateHistory_Result> SpGetAgregateHistory(string startDate, string endDate, string university, string province, string syndromId, string name, string family, string nationalCode, Nullable<int> skip, Nullable<int> take, string admissionType, string paper, string networkId, string centerId, Nullable<bool> deleted, Nullable<bool> indirect, Nullable<bool> duplicate, Nullable<int> currentUserId)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var universityParameter = university != null ?
                new ObjectParameter("University", university) :
                new ObjectParameter("University", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            var syndromIdParameter = syndromId != null ?
                new ObjectParameter("SyndromId", syndromId) :
                new ObjectParameter("SyndromId", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var familyParameter = family != null ?
                new ObjectParameter("Family", family) :
                new ObjectParameter("Family", typeof(string));
    
            var nationalCodeParameter = nationalCode != null ?
                new ObjectParameter("NationalCode", nationalCode) :
                new ObjectParameter("NationalCode", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var admissionTypeParameter = admissionType != null ?
                new ObjectParameter("AdmissionType", admissionType) :
                new ObjectParameter("AdmissionType", typeof(string));
    
            var paperParameter = paper != null ?
                new ObjectParameter("Paper", paper) :
                new ObjectParameter("Paper", typeof(string));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("CenterId", centerId) :
                new ObjectParameter("CenterId", typeof(string));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            var indirectParameter = indirect.HasValue ?
                new ObjectParameter("Indirect", indirect) :
                new ObjectParameter("Indirect", typeof(bool));
    
            var duplicateParameter = duplicate.HasValue ?
                new ObjectParameter("Duplicate", duplicate) :
                new ObjectParameter("Duplicate", typeof(bool));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAgregateHistory_Result>("SpGetAgregateHistory", startDateParameter, endDateParameter, universityParameter, provinceParameter, syndromIdParameter, nameParameter, familyParameter, nationalCodeParameter, skipParameter, takeParameter, admissionTypeParameter, paperParameter, networkIdParameter, centerIdParameter, deletedParameter, indirectParameter, duplicateParameter, currentUserIdParameter);
        }
    
        public virtual ObjectResult<SpGetHistory_abasi_Result> SpGetHistory_abasi(string startDate, string endDate, string university, string province, string syndromId, Nullable<int> skip, Nullable<int> take, string networkId, string centerId, Nullable<int> currentUserId)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var universityParameter = university != null ?
                new ObjectParameter("University", university) :
                new ObjectParameter("University", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            var syndromIdParameter = syndromId != null ?
                new ObjectParameter("SyndromId", syndromId) :
                new ObjectParameter("SyndromId", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("CenterId", centerId) :
                new ObjectParameter("CenterId", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetHistory_abasi_Result>("SpGetHistory_abasi", startDateParameter, endDateParameter, universityParameter, provinceParameter, syndromIdParameter, skipParameter, takeParameter, networkIdParameter, centerIdParameter, currentUserIdParameter);
        }
    
        public virtual ObjectResult<SpGetHistory_grouped_Result> SpGetHistory_grouped(string startDate, string endDate, string university, string province, string syndromId, Nullable<int> skip, Nullable<int> take, string networkId, string centerId, Nullable<int> currentUserId)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var universityParameter = university != null ?
                new ObjectParameter("University", university) :
                new ObjectParameter("University", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            var syndromIdParameter = syndromId != null ?
                new ObjectParameter("SyndromId", syndromId) :
                new ObjectParameter("SyndromId", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("CenterId", centerId) :
                new ObjectParameter("CenterId", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetHistory_grouped_Result>("SpGetHistory_grouped", startDateParameter, endDateParameter, universityParameter, provinceParameter, syndromIdParameter, skipParameter, takeParameter, networkIdParameter, centerIdParameter, currentUserIdParameter);
        }
    
        public virtual ObjectResult<SpGetHospitalsHistory_Result> SpGetHospitalsHistory(string startDate, string endDate, string university, string province, string syndromId, Nullable<int> skip, Nullable<int> take, string paper, string networkId, string centerId, Nullable<bool> deleted, Nullable<bool> indirect, Nullable<bool> duplicate, Nullable<int> currentUserId)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var universityParameter = university != null ?
                new ObjectParameter("University", university) :
                new ObjectParameter("University", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            var syndromIdParameter = syndromId != null ?
                new ObjectParameter("SyndromId", syndromId) :
                new ObjectParameter("SyndromId", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var paperParameter = paper != null ?
                new ObjectParameter("Paper", paper) :
                new ObjectParameter("Paper", typeof(string));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("CenterId", centerId) :
                new ObjectParameter("CenterId", typeof(string));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            var indirectParameter = indirect.HasValue ?
                new ObjectParameter("Indirect", indirect) :
                new ObjectParameter("Indirect", typeof(bool));
    
            var duplicateParameter = duplicate.HasValue ?
                new ObjectParameter("Duplicate", duplicate) :
                new ObjectParameter("Duplicate", typeof(bool));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetHospitalsHistory_Result>("SpGetHospitalsHistory", startDateParameter, endDateParameter, universityParameter, provinceParameter, syndromIdParameter, skipParameter, takeParameter, paperParameter, networkIdParameter, centerIdParameter, deletedParameter, indirectParameter, duplicateParameter, currentUserIdParameter);
        }
    
        public virtual int spGetLabDeasises(Nullable<int> corporateId, ObjectParameter totalCount, Nullable<int> skip, Nullable<int> take)
        {
            var corporateIdParameter = corporateId.HasValue ?
                new ObjectParameter("CorporateId", corporateId) :
                new ObjectParameter("CorporateId", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetLabDeasises", corporateIdParameter, totalCount, skipParameter, takeParameter);
        }
    
        public virtual ObjectResult<spGetLabDeasises__Result> spGetLabDeasises_(Nullable<int> corporateId, ObjectParameter totalCount, Nullable<int> skip, Nullable<int> take)
        {
            var corporateIdParameter = corporateId.HasValue ?
                new ObjectParameter("CorporateId", corporateId) :
                new ObjectParameter("CorporateId", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLabDeasises__Result>("spGetLabDeasises_", corporateIdParameter, totalCount, skipParameter, takeParameter);
        }
    
        public virtual ObjectResult<spGetLabSample_Result> spGetLabSample(string startDate, string endDate, Nullable<int> corporateId, Nullable<int> skip, Nullable<int> take)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var corporateIdParameter = corporateId.HasValue ?
                new ObjectParameter("CorporateId", corporateId) :
                new ObjectParameter("CorporateId", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLabSample_Result>("spGetLabSample", startDateParameter, endDateParameter, corporateIdParameter, skipParameter, takeParameter);
        }
    
        public virtual ObjectResult<spGetLabSampleabasi_Result> spGetLabSampleabasi(string startDate, string endDate, Nullable<int> corporateId, Nullable<int> skip, Nullable<int> take, ObjectParameter totalCount)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var corporateIdParameter = corporateId.HasValue ?
                new ObjectParameter("CorporateId", corporateId) :
                new ObjectParameter("CorporateId", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLabSampleabasi_Result>("spGetLabSampleabasi", startDateParameter, endDateParameter, corporateIdParameter, skipParameter, takeParameter, totalCount);
        }
    
        public virtual ObjectResult<SpGetLabStatics_Result> SpGetLabStatics(Nullable<int> labId, Nullable<int> currentUserId)
        {
            var labIdParameter = labId.HasValue ?
                new ObjectParameter("labId", labId) :
                new ObjectParameter("labId", typeof(int));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("currentUserId", currentUserId) :
                new ObjectParameter("currentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLabStatics_Result>("SpGetLabStatics", labIdParameter, currentUserIdParameter);
        }
    
        public virtual ObjectResult<SpGetMinimumAggregate_Result> SpGetMinimumAggregate(string startDate, string endDate, string university, string province, string syndromId, Nullable<int> skip, Nullable<int> take, string networkId, string centerId, Nullable<bool> deleted, Nullable<bool> indirect, Nullable<bool> duplicate, Nullable<int> currentUserId)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var universityParameter = university != null ?
                new ObjectParameter("University", university) :
                new ObjectParameter("University", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            var syndromIdParameter = syndromId != null ?
                new ObjectParameter("SyndromId", syndromId) :
                new ObjectParameter("SyndromId", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("CenterId", centerId) :
                new ObjectParameter("CenterId", typeof(string));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            var indirectParameter = indirect.HasValue ?
                new ObjectParameter("Indirect", indirect) :
                new ObjectParameter("Indirect", typeof(bool));
    
            var duplicateParameter = duplicate.HasValue ?
                new ObjectParameter("Duplicate", duplicate) :
                new ObjectParameter("Duplicate", typeof(bool));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMinimumAggregate_Result>("SpGetMinimumAggregate", startDateParameter, endDateParameter, universityParameter, provinceParameter, syndromIdParameter, skipParameter, takeParameter, networkIdParameter, centerIdParameter, deletedParameter, indirectParameter, duplicateParameter, currentUserIdParameter);
        }
    
        public virtual int SyncByAhkam()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SyncByAhkam");
        }
    
        public virtual int UpdateRule(Nullable<int> groupId, string positionIds, string userIds, string granteds, Nullable<int> changeUserId, string changeDate, string iP)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var positionIdsParameter = positionIds != null ?
                new ObjectParameter("PositionIds", positionIds) :
                new ObjectParameter("PositionIds", typeof(string));
    
            var userIdsParameter = userIds != null ?
                new ObjectParameter("UserIds", userIds) :
                new ObjectParameter("UserIds", typeof(string));
    
            var grantedsParameter = granteds != null ?
                new ObjectParameter("Granteds", granteds) :
                new ObjectParameter("Granteds", typeof(string));
    
            var changeUserIdParameter = changeUserId.HasValue ?
                new ObjectParameter("ChangeUserId", changeUserId) :
                new ObjectParameter("ChangeUserId", typeof(int));
    
            var changeDateParameter = changeDate != null ?
                new ObjectParameter("ChangeDate", changeDate) :
                new ObjectParameter("ChangeDate", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRule", groupIdParameter, positionIdsParameter, userIdsParameter, grantedsParameter, changeUserIdParameter, changeDateParameter, iPParameter);
        }
    
        public virtual ObjectResult<string> spCheckBeforeImport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spCheckBeforeImport");
        }
    
        public virtual int spImportUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spImportUsers");
        }
    
        public virtual ObjectResult<SpGetHistoryKarami_Result> SpGetHistoryKarami(string startDate, string endDate, string university, string province, string syndromId, Nullable<int> skip, Nullable<int> take, string admissionType, string paper, string networkId, string centerId, Nullable<bool> deleted, Nullable<bool> indirect, Nullable<bool> duplicate, Nullable<int> currentUserId)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var universityParameter = university != null ?
                new ObjectParameter("University", university) :
                new ObjectParameter("University", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            var syndromIdParameter = syndromId != null ?
                new ObjectParameter("SyndromId", syndromId) :
                new ObjectParameter("SyndromId", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var admissionTypeParameter = admissionType != null ?
                new ObjectParameter("AdmissionType", admissionType) :
                new ObjectParameter("AdmissionType", typeof(string));
    
            var paperParameter = paper != null ?
                new ObjectParameter("Paper", paper) :
                new ObjectParameter("Paper", typeof(string));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("CenterId", centerId) :
                new ObjectParameter("CenterId", typeof(string));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            var indirectParameter = indirect.HasValue ?
                new ObjectParameter("Indirect", indirect) :
                new ObjectParameter("Indirect", typeof(bool));
    
            var duplicateParameter = duplicate.HasValue ?
                new ObjectParameter("Duplicate", duplicate) :
                new ObjectParameter("Duplicate", typeof(bool));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetHistoryKarami_Result>("SpGetHistoryKarami", startDateParameter, endDateParameter, universityParameter, provinceParameter, syndromIdParameter, skipParameter, takeParameter, admissionTypeParameter, paperParameter, networkIdParameter, centerIdParameter, deletedParameter, indirectParameter, duplicateParameter, currentUserIdParameter);
        }
    
        public virtual int spFillFullProAdmission()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFillFullProAdmission");
        }
    
        public virtual int spFillFullProAdmissionItem(Nullable<int> admissionId, Nullable<bool> dontUpdatePatientEtc)
        {
            var admissionIdParameter = admissionId.HasValue ?
                new ObjectParameter("AdmissionId", admissionId) :
                new ObjectParameter("AdmissionId", typeof(int));
    
            var dontUpdatePatientEtcParameter = dontUpdatePatientEtc.HasValue ?
                new ObjectParameter("dontUpdatePatientEtc", dontUpdatePatientEtc) :
                new ObjectParameter("dontUpdatePatientEtc", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFillFullProAdmissionItem", admissionIdParameter, dontUpdatePatientEtcParameter);
        }
    
        public virtual ObjectResult<spSearchMaxForExcel_Result> spSearchMaxForExcel(string province, string university, string networkId, string centerId, string syndromId, string admissionType, string startDate, string endDate, string nationalCode, string name, string family, string paper, Nullable<int> skip, Nullable<int> take, string primaryResultId, Nullable<bool> showIncompleteItems, Nullable<bool> deleted, Nullable<int> currentUserId)
        {
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            var universityParameter = university != null ?
                new ObjectParameter("University", university) :
                new ObjectParameter("University", typeof(string));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            var centerIdParameter = centerId != null ?
                new ObjectParameter("CenterId", centerId) :
                new ObjectParameter("CenterId", typeof(string));
    
            var syndromIdParameter = syndromId != null ?
                new ObjectParameter("SyndromId", syndromId) :
                new ObjectParameter("SyndromId", typeof(string));
    
            var admissionTypeParameter = admissionType != null ?
                new ObjectParameter("AdmissionType", admissionType) :
                new ObjectParameter("AdmissionType", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var nationalCodeParameter = nationalCode != null ?
                new ObjectParameter("NationalCode", nationalCode) :
                new ObjectParameter("NationalCode", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var familyParameter = family != null ?
                new ObjectParameter("Family", family) :
                new ObjectParameter("Family", typeof(string));
    
            var paperParameter = paper != null ?
                new ObjectParameter("Paper", paper) :
                new ObjectParameter("Paper", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var primaryResultIdParameter = primaryResultId != null ?
                new ObjectParameter("primaryResultId", primaryResultId) :
                new ObjectParameter("primaryResultId", typeof(string));
    
            var showIncompleteItemsParameter = showIncompleteItems.HasValue ?
                new ObjectParameter("ShowIncompleteItems", showIncompleteItems) :
                new ObjectParameter("ShowIncompleteItems", typeof(bool));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSearchMaxForExcel_Result>("spSearchMaxForExcel", provinceParameter, universityParameter, networkIdParameter, centerIdParameter, syndromIdParameter, admissionTypeParameter, startDateParameter, endDateParameter, nationalCodeParameter, nameParameter, familyParameter, paperParameter, skipParameter, takeParameter, primaryResultIdParameter, showIncompleteItemsParameter, deletedParameter, currentUserIdParameter);
        }
    
        public virtual int UpdateAllCorporateHierarchy()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAllCorporateHierarchy");
        }
    
        public virtual int UpdateAllUsersCorporateHierarchy()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAllUsersCorporateHierarchy");
        }
    
        public virtual int UpdateUserCorporateHierarchy(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserCorporateHierarchy", userIdParameter);
        }
    
        public virtual ObjectResult<GetProSyndromDitailsForWord2_Result> GetProSyndromDitailsForWord2(Nullable<int> admissionId)
        {
            var admissionIdParameter = admissionId.HasValue ?
                new ObjectParameter("AdmissionId", admissionId) :
                new ObjectParameter("AdmissionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProSyndromDitailsForWord2_Result>("GetProSyndromDitailsForWord2", admissionIdParameter);
        }
    
        public virtual int GetProSyndromDitailsWithDescription(Nullable<int> admissionId)
        {
            var admissionIdParameter = admissionId.HasValue ?
                new ObjectParameter("AdmissionId", admissionId) :
                new ObjectParameter("AdmissionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetProSyndromDitailsWithDescription", admissionIdParameter);
        }
    
        public virtual ObjectResult<spGetVisiblePositions_Result> spGetVisiblePositions(Nullable<long> corporateId)
        {
            var corporateIdParameter = corporateId.HasValue ?
                new ObjectParameter("corporateId", corporateId) :
                new ObjectParameter("corporateId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetVisiblePositions_Result>("spGetVisiblePositions", corporateIdParameter);
        }
    
        public virtual int spUpdateAllCorporatesPath()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateAllCorporatesPath");
        }
    
        public virtual int spUpdateSingleCorporatePath(Nullable<long> corpId)
        {
            var corpIdParameter = corpId.HasValue ?
                new ObjectParameter("corpId", corpId) :
                new ObjectParameter("corpId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateSingleCorporatePath", corpIdParameter);
        }
    
        public virtual int updateAllCorporatesCityAndProvince()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateAllCorporatesCityAndProvince");
        }
    
        public virtual int updateCorporateCityAndProvince(Nullable<long> corpId)
        {
            var corpIdParameter = corpId.HasValue ?
                new ObjectParameter("corpId", corpId) :
                new ObjectParameter("corpId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateCorporateCityAndProvince", corpIdParameter);
        }
    
        public virtual int setidentity()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("setidentity");
        }
    
        public virtual ObjectResult<storp_searchuser_Result> storp_searchuser(string firstname, string lastname, string nationalcode, Nullable<int> take, Nullable<int> skip, ObjectParameter total)
        {
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var nationalcodeParameter = nationalcode != null ?
                new ObjectParameter("nationalcode", nationalcode) :
                new ObjectParameter("nationalcode", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
             return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<storp_searchuser_Result>("storp_searchuser", firstnameParameter, lastnameParameter, nationalcodeParameter, takeParameter, skipParameter, total);
        }
    
        public virtual ObjectResult<storp_GetCenters_Result> storp_GetCenters(Nullable<int> provinceId, Nullable<int> universityId, Nullable<int> networkId, string corporateName, string enName, string nationalCode, Nullable<int> take, Nullable<int> skip, ObjectParameter totalCount)
        {
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("provinceId", provinceId) :
                new ObjectParameter("provinceId", typeof(int));
    
            var universityIdParameter = universityId.HasValue ?
                new ObjectParameter("universityId", universityId) :
                new ObjectParameter("universityId", typeof(int));
    
            var networkIdParameter = networkId.HasValue ?
                new ObjectParameter("networkId", networkId) :
                new ObjectParameter("networkId", typeof(int));
    
            var corporateNameParameter = corporateName != null ?
                new ObjectParameter("corporateName", corporateName) :
                new ObjectParameter("corporateName", typeof(string));
    
            var enNameParameter = enName != null ?
                new ObjectParameter("enName", enName) :
                new ObjectParameter("enName", typeof(string));
    
            var nationalCodeParameter = nationalCode != null ?
                new ObjectParameter("nationalCode", nationalCode) :
                new ObjectParameter("nationalCode", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<storp_GetCenters_Result>("storp_GetCenters", provinceIdParameter, universityIdParameter, networkIdParameter, corporateNameParameter, enNameParameter, nationalCodeParameter, takeParameter, skipParameter, totalCount);
        }
    
        public virtual int storp_getusersbycorporateid(Nullable<int> corporateId, Nullable<int> take, Nullable<int> skip, ObjectParameter totalCount)
        {
            var corporateIdParameter = corporateId.HasValue ?
                new ObjectParameter("corporateId", corporateId) :
                new ObjectParameter("corporateId", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("storp_getusersbycorporateid", corporateIdParameter, takeParameter, skipParameter, totalCount);
        }
    
        public virtual ObjectResult<storp_getusersbycorporateid1_Result> storp_getusersbycorporateid1(Nullable<int> corporateId, Nullable<int> take, Nullable<int> skip, ObjectParameter totalCount)
        {
            var corporateIdParameter = corporateId.HasValue ?
                new ObjectParameter("corporateId", corporateId) :
                new ObjectParameter("corporateId", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<storp_getusersbycorporateid1_Result>("storp_getusersbycorporateid1", corporateIdParameter, takeParameter, skipParameter, totalCount);
        }
    
        public virtual ObjectResult<storp_ListOfUsersByCorpId_Result> storp_ListOfUsersByCorpId(Nullable<int> corporateid, Nullable<int> take, Nullable<int> skip, ObjectParameter totalCount)
        {
            var corporateidParameter = corporateid.HasValue ?
                new ObjectParameter("corporateid", corporateid) :
                new ObjectParameter("corporateid", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<storp_ListOfUsersByCorpId_Result>("storp_ListOfUsersByCorpId", corporateidParameter, takeParameter, skipParameter, totalCount);
        }
    
        public virtual ObjectResult<storp_searchusersofacorporate_Result> storp_searchusersofacorporate(Nullable<int> corporateId, string firstname, string lastname, string username, string mobile, string email, Nullable<int> take, Nullable<int> skip, ObjectParameter total)
        {
            var corporateIdParameter = corporateId.HasValue ?
                new ObjectParameter("corporateId", corporateId) :
                new ObjectParameter("corporateId", typeof(int));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<storp_searchusersofacorporate_Result>("storp_searchusersofacorporate", corporateIdParameter, firstnameParameter, lastnameParameter, usernameParameter, mobileParameter, emailParameter, takeParameter, skipParameter, total);
        }
    
        public virtual ObjectResult<storp_getcorporatehierarchy_Result> storp_getcorporatehierarchy(Nullable<int> corporateId)
        {
            var corporateIdParameter = corporateId.HasValue ?
                new ObjectParameter("corporateId", corporateId) :
                new ObjectParameter("corporateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<storp_getcorporatehierarchy_Result>("storp_getcorporatehierarchy", corporateIdParameter);
        }
    
        public virtual int storp_deactiveuser(Nullable<int> activate, Nullable<int> userId)
        {
            var activateParameter = activate.HasValue ?
                new ObjectParameter("activate", activate) :
                new ObjectParameter("activate", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("storp_deactiveuser", activateParameter, userIdParameter);
        }
    
        public virtual ObjectResult<storp_getposition_Result> storp_getposition()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<storp_getposition_Result>("storp_getposition");
        }
    
        public virtual int storp_insertuser(Nullable<int> id, Nullable<int> positionId, Nullable<int> corporatId, string firstName, string lastName, string nationalCode, string password, string mobile, string tel, string email)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("positionId", positionId) :
                new ObjectParameter("positionId", typeof(int));
    
            var corporatIdParameter = corporatId.HasValue ?
                new ObjectParameter("corporatId", corporatId) :
                new ObjectParameter("corporatId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var nationalCodeParameter = nationalCode != null ?
                new ObjectParameter("nationalCode", nationalCode) :
                new ObjectParameter("nationalCode", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var telParameter = tel != null ?
                new ObjectParameter("tel", tel) :
                new ObjectParameter("tel", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("storp_insertuser", idParameter, positionIdParameter, corporatIdParameter, firstNameParameter, lastNameParameter, nationalCodeParameter, passwordParameter, mobileParameter, telParameter, emailParameter);
        }
    
        public virtual int storp_editfaq(Nullable<int> id, string questionText, string answerText, string imageFileName, Nullable<bool> enabled, Nullable<int> systemId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var questionTextParameter = questionText != null ?
                new ObjectParameter("questionText", questionText) :
                new ObjectParameter("questionText", typeof(string));
    
            var answerTextParameter = answerText != null ?
                new ObjectParameter("answerText", answerText) :
                new ObjectParameter("answerText", typeof(string));
    
            var imageFileNameParameter = imageFileName != null ?
                new ObjectParameter("imageFileName", imageFileName) :
                new ObjectParameter("imageFileName", typeof(string));
    
            var enabledParameter = enabled.HasValue ?
                new ObjectParameter("enabled", enabled) :
                new ObjectParameter("enabled", typeof(bool));
    
            var systemIdParameter = systemId.HasValue ?
                new ObjectParameter("systemId", systemId) :
                new ObjectParameter("systemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("storp_editfaq", idParameter, questionTextParameter, answerTextParameter, imageFileNameParameter, enabledParameter, systemIdParameter);
        }
    
        public virtual ObjectResult<storp_searchfaq_Result> storp_searchfaq(string questionText, string answerText, Nullable<int> systemId, Nullable<int> take, Nullable<int> skip, ObjectParameter total)
        {
            var questionTextParameter = questionText != null ?
                new ObjectParameter("questionText", questionText) :
                new ObjectParameter("questionText", typeof(string));
    
            var answerTextParameter = answerText != null ?
                new ObjectParameter("answerText", answerText) :
                new ObjectParameter("answerText", typeof(string));
    
            var systemIdParameter = systemId.HasValue ?
                new ObjectParameter("systemId", systemId) :
                new ObjectParameter("systemId", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<storp_searchfaq_Result>("storp_searchfaq", questionTextParameter, answerTextParameter, systemIdParameter, takeParameter, skipParameter, total);
        }
    
        public virtual int storp_insertorupdatefaq(Nullable<int> id, Nullable<int> systemId, Nullable<bool> activityId, string questionText, string answerText, string imgName)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var systemIdParameter = systemId.HasValue ?
                new ObjectParameter("systemId", systemId) :
                new ObjectParameter("systemId", typeof(int));
    
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("activityId", activityId) :
                new ObjectParameter("activityId", typeof(bool));
    
            var questionTextParameter = questionText != null ?
                new ObjectParameter("questionText", questionText) :
                new ObjectParameter("questionText", typeof(string));
    
            var answerTextParameter = answerText != null ?
                new ObjectParameter("answerText", answerText) :
                new ObjectParameter("answerText", typeof(string));
    
            var imgNameParameter = imgName != null ?
                new ObjectParameter("imgName", imgName) :
                new ObjectParameter("imgName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("storp_insertorupdatefaq", idParameter, systemIdParameter, activityIdParameter, questionTextParameter, answerTextParameter, imgNameParameter);
        }
    
        public virtual ObjectResult<storp_Crtbl_SearchLoanWithCashierId_Result> storp_Crtbl_SearchLoanWithCashierId(string nationalCode, string clientCode, Nullable<int> cashierId, Nullable<int> take, Nullable<int> skip, ObjectParameter total)
        {
            var nationalCodeParameter = nationalCode != null ?
                new ObjectParameter("nationalCode", nationalCode) :
                new ObjectParameter("nationalCode", typeof(string));
    
            var clientCodeParameter = clientCode != null ?
                new ObjectParameter("clientCode", clientCode) :
                new ObjectParameter("clientCode", typeof(string));
    
            var cashierIdParameter = cashierId.HasValue ?
                new ObjectParameter("cashierId", cashierId) :
                new ObjectParameter("cashierId", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<storp_Crtbl_SearchLoanWithCashierId_Result>("storp_Crtbl_SearchLoanWithCashierId", nationalCodeParameter, clientCodeParameter, cashierIdParameter, takeParameter, skipParameter, total);
        }
    
        public virtual ObjectResult<storp_Crtbl_SearchLoan_Result> storp_Crtbl_SearchLoan(string nationalCode, string clientCode, Nullable<int> cashierId, Nullable<int> take, Nullable<int> skip, ObjectParameter total)
        {
            var nationalCodeParameter = nationalCode != null ?
                new ObjectParameter("nationalCode", nationalCode) :
                new ObjectParameter("nationalCode", typeof(string));
    
            var clientCodeParameter = clientCode != null ?
                new ObjectParameter("clientCode", clientCode) :
                new ObjectParameter("clientCode", typeof(string));
    
            var cashierIdParameter = cashierId.HasValue ?
                new ObjectParameter("cashierId", cashierId) :
                new ObjectParameter("cashierId", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<storp_Crtbl_SearchLoan_Result>("storp_Crtbl_SearchLoan", nationalCodeParameter, clientCodeParameter, cashierIdParameter, takeParameter, skipParameter, total);
        }
    
        public virtual int storp_changeactivityoffaq(Nullable<int> id, Nullable<bool> enabled)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var enabledParameter = enabled.HasValue ?
                new ObjectParameter("enabled", enabled) :
                new ObjectParameter("enabled", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("storp_changeactivityoffaq", idParameter, enabledParameter);
        }
    
        public virtual ObjectResult<storp_Crtbl_SearchLoanForEtebariUser_Result> storp_Crtbl_SearchLoanForEtebariUser(string nationalCode, string clientCode, Nullable<int> cashierId, Nullable<int> take, Nullable<int> skip, ObjectParameter total)
        {
            var nationalCodeParameter = nationalCode != null ?
                new ObjectParameter("nationalCode", nationalCode) :
                new ObjectParameter("nationalCode", typeof(string));
    
            var clientCodeParameter = clientCode != null ?
                new ObjectParameter("clientCode", clientCode) :
                new ObjectParameter("clientCode", typeof(string));
    
            var cashierIdParameter = cashierId.HasValue ?
                new ObjectParameter("cashierId", cashierId) :
                new ObjectParameter("cashierId", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<storp_Crtbl_SearchLoanForEtebariUser_Result>("storp_Crtbl_SearchLoanForEtebariUser", nationalCodeParameter, clientCodeParameter, cashierIdParameter, takeParameter, skipParameter, total);
        }
    
        public virtual ObjectResult<storp_Crtbl_SearchLoanForMaaliUser_Result> storp_Crtbl_SearchLoanForMaaliUser(string nationalCode, string clientCode, Nullable<int> cashierId, Nullable<int> take, Nullable<int> skip, ObjectParameter total)
        {
            var nationalCodeParameter = nationalCode != null ?
                new ObjectParameter("nationalCode", nationalCode) :
                new ObjectParameter("nationalCode", typeof(string));
    
            var clientCodeParameter = clientCode != null ?
                new ObjectParameter("clientCode", clientCode) :
                new ObjectParameter("clientCode", typeof(string));
    
            var cashierIdParameter = cashierId.HasValue ?
                new ObjectParameter("cashierId", cashierId) :
                new ObjectParameter("cashierId", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<storp_Crtbl_SearchLoanForMaaliUser_Result>("storp_Crtbl_SearchLoanForMaaliUser", nationalCodeParameter, clientCodeParameter, cashierIdParameter, takeParameter, skipParameter, total);
        }
    
        public virtual ObjectResult<storp_Ctr_SearchRisk_Result> storp_Ctr_SearchRisk(Nullable<int> take, Nullable<int> skip, ObjectParameter total)
        {
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<storp_Ctr_SearchRisk_Result>("storp_Ctr_SearchRisk", takeParameter, skipParameter, total);
        }
    
        public virtual ObjectResult<storp_Ctr_SearchRiskByCashierId_Result> storp_Ctr_SearchRiskByCashierId(Nullable<int> cashierId, Nullable<int> take, Nullable<int> skip, ObjectParameter total)
        {
            var cashierIdParameter = cashierId.HasValue ?
                new ObjectParameter("cashierId", cashierId) :
                new ObjectParameter("cashierId", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<storp_Ctr_SearchRiskByCashierId_Result>("storp_Ctr_SearchRiskByCashierId", cashierIdParameter, takeParameter, skipParameter, total);
        }
    }
}
